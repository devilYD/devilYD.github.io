{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/C-标准库笔笔记-三.md","hash":"ba314c97263966a39a47844cfd6ebf78a4858707","modified":1646228915412},{"_id":"source/_posts/C-标准库笔笔记-一.md","hash":"cfaf62b6fc34a258b63570c46a886e587eaadab2","modified":1646228930584},{"_id":"source/_posts/在别人的小屋瞎想.md","hash":"ea37c8e4b21fbdf651526c41b88a94b7db2df1ba","modified":1646228827996},{"_id":"source/_posts/C-标准库笔笔记-二.md","hash":"008fd9f428951b22c5cfa382c05025710cb9f460","modified":1646228953285},{"_id":"source/_posts/我想.md","hash":"9f7a3d35061c18cbbea8d2872ff907730d3363fe","modified":1646228792113},{"_id":"source/_posts/砂糖与香辛料.md","hash":"9cc7f6a81b4a33e580607a5b875cecaccdd557ca","modified":1646228756673},{"_id":"source/_posts/无题.md","hash":"779980aa23b29ab0ef69a06916815142a31d6d41","modified":1646228807975},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1646225615851},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1646225615863},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1646225615862},{"_id":"themes/hexo-theme-next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1646225615868},{"_id":"themes/hexo-theme-next/_vendors.yml","hash":"4e771ff4895961904f946f893821707be22b2693","modified":1646225615869},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1646225615870},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1646225615868},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1646225615868},{"_id":"themes/hexo-theme-next/README.md","hash":"43fe29330352545446a532e6630866251129882a","modified":1646225615869},{"_id":"themes/hexo-theme-next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1646225615863},{"_id":"themes/hexo-theme-next/package.json","hash":"7d4167385c128f93bf9596620fb2f6858f263bcd","modified":1646225615895},{"_id":"themes/hexo-theme-next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1646225615863},{"_id":"themes/hexo-theme-next/_config.yml","hash":"ca4de510bbe465a4ca21a274cae85281e24b8e18","modified":1646225615869},{"_id":"themes/hexo-theme-next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1646225615896},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1646225615866},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1646225615865},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1646225615864},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1646225615864},{"_id":"themes/hexo-theme-next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1646225615866},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1646225615865},{"_id":"themes/hexo-theme-next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1646225615866},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1646225615866},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1646225615871},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1646225615870},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1646225615870},{"_id":"themes/hexo-theme-next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1646225615895},{"_id":"themes/hexo-theme-next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1646225615895},{"_id":"themes/hexo-theme-next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1646225615895},{"_id":"themes/hexo-theme-next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1646225615878},{"_id":"themes/hexo-theme-next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1646225615894},{"_id":"themes/hexo-theme-next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1646225615894},{"_id":"themes/hexo-theme-next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1646225615895},{"_id":"themes/hexo-theme-next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1646225615872},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1646225615873},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1646225615872},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1646225615873},{"_id":"themes/hexo-theme-next/languages/bn.yml","hash":"e78a674af44f19415b9bd91e994548a95be174ae","modified":1646225615873},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1646225615873},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1646225615874},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1646225615874},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1646225615874},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1646225615874},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1646225615874},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1646225615875},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"d6e2add7488065ec4f7d21cfcf7f0eaa877a84f4","modified":1646225615875},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1646225615875},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1646225615876},{"_id":"themes/hexo-theme-next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1646225615876},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1646225615875},{"_id":"themes/hexo-theme-next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1646225615876},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1646225615875},{"_id":"themes/hexo-theme-next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1646225615939},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1646225615876},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1646225615876},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1646225615877},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1646225615877},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1646225615865},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1646225615877},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1646225615877},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1646225615864},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"e1d6bf38cf34972ca2ee5331a727787fe14082a3","modified":1646225615871},{"_id":"themes/hexo-theme-next/.github/workflows/label-commenter.yml","hash":"7dec949b13131783e726facb2f4acde0945db1b8","modified":1646225615867},{"_id":"themes/hexo-theme-next/.github/workflows/labeler.yml","hash":"46d0b29dc561fe571d91fd06a7c8ef606b984c72","modified":1646225615867},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1646225615865},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1646225615865},{"_id":"themes/hexo-theme-next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1646225615867},{"_id":"themes/hexo-theme-next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1646225615867},{"_id":"themes/hexo-theme-next/.github/workflows/linter.yml","hash":"204f009ed04428833e60aad7de9c2982379fa6d7","modified":1646225615867},{"_id":"themes/hexo-theme-next/.github/workflows/stale.yml","hash":"32e7dfb55ecf8af66aebfed471be09ef2eb10e18","modified":1646225615868},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1646225615871},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1646225615872},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"354b0b0a24cbe97cccf2ec8bd97eb7d624fa0dea","modified":1646225615872},{"_id":"themes/hexo-theme-next/.github/workflows/tester.yml","hash":"08c50c0c37db1dd2c7baa8f4bbab1144f38ce0bb","modified":1646225615868},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1646225615878},{"_id":"themes/hexo-theme-next/layout/_partials/comments.njk","hash":"d6b7bb7764e3b471ed6b4e5715f6cbe2dd453f59","modified":1646225615879},{"_id":"themes/hexo-theme-next/layout/_macro/post.njk","hash":"e371d64c65c05ad7b73239789b56d92a8ab384a2","modified":1646225615878},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eec74e135d01948361020140c3798769e1e7363b","modified":1646225615879},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1646225615883},{"_id":"themes/hexo-theme-next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1646225615886},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1646225615886},{"_id":"themes/hexo-theme-next/layout/_partials/footer.njk","hash":"65f0d69084e0e26a0153d3b8db610a15c4102691","modified":1646225615879},{"_id":"themes/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1646225615890},{"_id":"themes/hexo-theme-next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1646225615891},{"_id":"themes/hexo-theme-next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1646225615892},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1646225615892},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1646225615892},{"_id":"themes/hexo-theme-next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1646225615881},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1646225615885},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1646225615905},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1646225615927},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646225615928},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1646225615921},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","hash":"7dc97674c232f6ca71e48b95e3f66472cd8e9c05","modified":1646225615927},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646225615928},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"8bca7ae3cebb3857866d718a562c5d8820fcfbe5","modified":1646225615896},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1646225615928},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646225615928},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1646225615929},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1646225615928},{"_id":"themes/hexo-theme-next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1646225615929},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1646225615929},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1646225615929},{"_id":"themes/hexo-theme-next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1646225615930},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"b0bdb542a809932182cfbb8772328115142a0b77","modified":1646225615930},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1646225615930},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1646225615900},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1646225615900},{"_id":"themes/hexo-theme-next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1646225615930},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"11c40cd31cec00bfca7a45d596e76b425fc397c5","modified":1646225615901},{"_id":"themes/hexo-theme-next/source/js/schedule.js","hash":"6dade4388aa6579576a35758075134f573985d57","modified":1646225615931},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1646225615901},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"056f9c9f8c6e34b084b4ac69901c9858a072d9ab","modified":1646225615900},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"5a132b7f9280a40b3d5fb40928c8cbbe071fe6f6","modified":1646225615900},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"e73f43f1bcb46965e317285d6831e129a40ea59b","modified":1646225615901},{"_id":"themes/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1646225615901},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1646225615902},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1646225615901},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"c13fa66aae52f59f88881738c00ebdcaf0209496","modified":1646225615938},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1646225615902},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1646225615902},{"_id":"themes/hexo-theme-next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1646225615903},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1646225615902},{"_id":"themes/hexo-theme-next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1646225615903},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1646225615903},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1646225615903},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1646225615904},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1646225615904},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1646225615903},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1646225615904},{"_id":"themes/hexo-theme-next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1646225615939},{"_id":"themes/hexo-theme-next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1646225615939},{"_id":"themes/hexo-theme-next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1646225615939},{"_id":"themes/hexo-theme-next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1646225615940},{"_id":"themes/hexo-theme-next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1646225615940},{"_id":"themes/hexo-theme-next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1646225615940},{"_id":"themes/hexo-theme-next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1646225615940},{"_id":"themes/hexo-theme-next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1646225615941},{"_id":"themes/hexo-theme-next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1646225615940},{"_id":"themes/hexo-theme-next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1646225615941},{"_id":"themes/hexo-theme-next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1646225615941},{"_id":"themes/hexo-theme-next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1646225615942},{"_id":"themes/hexo-theme-next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1646225615942},{"_id":"themes/hexo-theme-next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1646225615942},{"_id":"themes/hexo-theme-next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1646225615942},{"_id":"themes/hexo-theme-next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1646225615942},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1646225615880},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1646225615880},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.njk","hash":"3ff7e251bf99a275cd5dfda1b3e51f773c5f7b05","modified":1646225615880},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"f066390762faf6684a523e2eb943420023aac2b1","modified":1646225615880},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1646225615879},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1646225615883},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"940cad08a67e6c361214045096bd3cdffdf44fcf","modified":1646225615881},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1646225615883},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.njk","hash":"67372599fe025ebe442b73151e5bb56415758356","modified":1646225615881},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1646225615884},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1646225615883},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1646225615884},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1646225615884},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1646225615884},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1646225615885},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"9c136edd2248e2d50c1f6110b75e2b75c299bbd7","modified":1646225615882},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1646225615885},{"_id":"themes/hexo-theme-next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1646225615882},{"_id":"themes/hexo-theme-next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1646225615882},{"_id":"themes/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"130e776575d634201d4f8ef3d78dc12624f19fde","modified":1646225615882},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1646225615882},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1646225615885},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c7cea42f6db2137c11ca1d83e43fcb7ad7ccfb89","modified":1646225615887},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1646225615887},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1646225615887},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1646225615887},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1646225615887},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"50c42adf5ba59ff227e9bce6dc4085694e5fe3c2","modified":1646225615888},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1646225615888},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1646225615889},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1646225615888},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1646225615889},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1646225615890},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1646225615888},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1646225615890},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1646225615890},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1646225615889},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1646225615890},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1646225615892},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1646225615892},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"a84db8bc8804335f95609a221ac1746433dcdc89","modified":1646225615891},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1646225615891},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1646225615893},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1646225615893},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1646225615893},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1646225615893},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1646225615894},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1646225615894},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1646225615894},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1646225615926},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"f78cd74b25cc0ef65c060fec1d7e056967e26b4b","modified":1646225615897},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1646225615926},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1646225615927},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1646225615927},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1646225615926},{"_id":"themes/hexo-theme-next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1646225615897},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1646225615897},{"_id":"themes/hexo-theme-next/scripts/events/lib/utils.js","hash":"7bdf8588563cd13a1eb7a2c5bcffd831855b59a0","modified":1646225615897},{"_id":"themes/hexo-theme-next/scripts/events/lib/vendors.js","hash":"09cba2c433fe47981d07d67c038790f4fc2ec16b","modified":1646225615897},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1646225615898},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1646225615935},{"_id":"themes/hexo-theme-next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1646225615936},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1646225615898},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1646225615898},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"e1b4bf9aa47d14c790a0920d7dbb3e9812d4358b","modified":1646225615931},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1646225615935},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1646225615898},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1646225615899},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1646225615899},{"_id":"themes/hexo-theme-next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1646225615899},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1646225615899},{"_id":"themes/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1646225615899},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1646225615936},{"_id":"themes/hexo-theme-next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1646225615905},{"_id":"themes/hexo-theme-next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1646225615913},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1646225615905},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1646225615913},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1646225615909},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1646225615916},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1646225615917},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1646225615916},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1646225615917},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1646225615918},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1646225615918},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1646225615921},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1646225615918},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1646225615923},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1646225615923},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1646225615924},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1646225615924},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1646225615921},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"28030c61288cc0e1321b18373a5c79029fd76a53","modified":1646225615923},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1646225615924},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1646225615922},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1646225615922},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f337981f8f20944ed366694aea88146c7b0a13ab","modified":1646225615922},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"c9a9e07b721bb2376e24753ae0a9452431439114","modified":1646225615922},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1646225615924},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1646225615923},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1646225615932},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1646225615925},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1646225615924},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1646225615925},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1646225615925},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1646225615925},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1646225615932},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1646225615933},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1646225615933},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1646225615933},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1646225615932},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1646225615934},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1646225615934},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1646225615934},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1646225615934},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1646225615933},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1646225615933},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1646225615934},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1646225615935},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1646225615935},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"dc2b0e89aa32afc7f7a7e2d7a277dadb7f96e06d","modified":1646225615936},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"d0829fe41d2fe86b8499e2a896556c1275ea0066","modified":1646225615937},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ea94731438d8c518d946601f8f46a65b92381fac","modified":1646225615936},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1646225615938},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1646225615906},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1646225615937},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1646225615906},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1646225615906},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"2618135cbcee6bf228f6734767de1995e5eaaac6","modified":1646225615938},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1646225615910},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1646225615910},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1646225615910},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1646225615910},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1646225615906},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1646225615906},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1646225615910},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1646225615911},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1646225615911},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1646225615907},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1646225615911},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1646225615908},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1646225615908},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"7a34d020877273dcf11c25fa481409300efb8659","modified":1646225615907},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1646225615907},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1646225615908},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1646225615908},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1646225615909},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1646225615909},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1646225615912},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1646225615911},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1646225615909},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"67fc7a1eb59c8451eec34e572cbb2fd1424757bc","modified":1646225615912},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1646225615913},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1646225615912},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1646225615912},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1646225615914},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1646225615913},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1646225615915},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1646225615915},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1646225615915},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1646225615914},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1646225615914},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1646225615916},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1646225615916},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1646225615915},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1646225615915},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1646225615919},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1646225615919},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1646225615919},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"a4003e1408844568cb5102a5a111046cb19b2d31","modified":1646225615917},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1646225615917},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1646225615918},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1646225615920},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1646225615920},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1646225615919},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1646225615920},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"40a38f2129617ffd4e8d5cd78e982fdfc9941acf","modified":1646225615920},{"_id":"public/2022/03/02/C-标准库笔笔记-一/index.html","hash":"689e02fadc3f1f2ed24a9d2951254312bd1ae06c","modified":1646265249830},{"_id":"public/2022/03/02/在别人的小屋瞎想/index.html","hash":"2d857d00e8c768ce8f9434a476cd258cda055a99","modified":1646265249830},{"_id":"public/2022/03/02/无题/index.html","hash":"6cccd6dd1b09492baa0426e63e4d92884ea8bf1b","modified":1646265249830},{"_id":"public/2022/03/02/我想/index.html","hash":"40bcd2ecbe1c964d3676f141c036780783b337ed","modified":1646265249830},{"_id":"public/2022/03/02/砂糖与香辛料/index.html","hash":"b898f9efc25c60e083a311c974abf205db743a43","modified":1646265249830},{"_id":"public/archives/index.html","hash":"95768c16a44d771fbaec064f7e506007567b3105","modified":1646265249830},{"_id":"public/archives/2022/index.html","hash":"becd0d5816c747adfc03f2dd095da1266024afdf","modified":1646265249830},{"_id":"public/archives/2022/03/index.html","hash":"77ec76c3592a319ba6d2a3f5ce8c4659c222203f","modified":1646265249830},{"_id":"public/tags/编程相关/index.html","hash":"7994df9125b3f90f0ba05486547cb5b62e72334c","modified":1646265249830},{"_id":"public/tags/C/index.html","hash":"2b8ee563b3b13851885bfa16e04bb323c152c749","modified":1646265249830},{"_id":"public/tags/C-标准库/index.html","hash":"2802a848fa167f3c57aa73cf1df8b46ead97c19b","modified":1646265249830},{"_id":"public/tags/致蛋蛋/index.html","hash":"f3d50d833d7fe532e30684d149531f949ee94b4a","modified":1646265249830},{"_id":"public/2022/03/02/C-标准库笔笔记-三/index.html","hash":"abdf5d8565ca5a36743b4d960b6b449384e59e92","modified":1646265249830},{"_id":"public/2022/03/02/C-标准库笔笔记-二/index.html","hash":"c501cab1feb01cdfb5d1366cb2821e8307b999d8","modified":1646265249830},{"_id":"public/index.html","hash":"bc394688691e6558a892fa1a6bbae3a3cdb0742c","modified":1646265249830},{"_id":"public/tags/一首小诗/index.html","hash":"9ce9fcdc1d1bec96f07545bf232ec122a32ce50f","modified":1646265249830},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646265249830},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1646265249830},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646265249830},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646265249830},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1646265249830},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1646265249830},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1646265249830},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1646265249830},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1646265249830},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1646265249830},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1646265249830},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1646265249830},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1646265249830},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1646265249830},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1646265249830},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1646265249830},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1646265249830},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1646265249830},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1646265249830},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1646265249830},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1646265249830},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1646265249830},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1646265249830},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1646265249830},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1646265249830},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1646265249830},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1646265249830},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1646265249830},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1646265249830},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1646265249830},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1646265249830},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1646265249830},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1646265249830},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1646265249830},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1646265249830},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1646265249830},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1646265249830},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1646265249830},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1646265249830},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1646265249830},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1646265249830},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1646265249830},{"_id":"public/css/main.css","hash":"e296bf37967d6bf1d026703fc32ffce68af7a923","modified":1646265249830}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"C++标准库笔笔记_一","date":"2022-03-02T13:38:40.000Z","_content":"\n<center>\n\n# C++标准库笔记(一)\n\n</center>\n\n## 什么是C++标准库\n\nC++标准库是一组C++模板类，它提供了通用的编程数据结构和函数，如链表、堆、数组、算法、迭代器和任何其他你可以想到的C++组件。C++标准库也包含了C标准库，并在C++标准中进行了定义(例如C++11标准)。\n\n## 如何使用C++标准库\n\n在C++源码中标准库通常在最前端进行引用，具体如下：\n\n```c++\n#include <iostearm>\n```\n\n其中“#”表示预处理，也就是在编译前的预处理阶段执行这部分操作。\"include\"表示引用，而<iostearm>则是标准库名(顺便一说如果使用自己写的库文件引用时使用“”而不是<>)。\n\n## 关于iostearm库\n\nio即输入(in)输出(out)，iostearm库中包含两个基础类型istearm和ostearm，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。术语“流”(stearm)想要表达的是：*随着时间的推移，字符是顺序生成或消耗的。*\n标准库定义流4个IO对象。为了处理输入，使用一个名为cin的istearm类型的对象。这个对象也被成为标准输入(standard input)。对于输出，使用一个名为cout的ostearm类型的对象，此对象也被称为标准输出(standard output)。此外，标准库还定义了两个ostearm对象分别为cerr和clog，cerr通常用来输出警告和错误信息，clog通常用来输出程序运行时的一般信息，如日志等。\n系统通常将程序所运行的窗口与这些对象关联起来。因此，当我们读取cin，数据将从程序正在运行的窗口读入，而输出时则会写入到同一个窗口。\n另外，标准库中使用的所有名字均定义在命名空间std中，使用时需要在名字前加作用域，如`std::cin`等，又或者可在程序前端使用using声明，如：\n```c++\nusing std::cin;\nusing std::cout;\n```\n最好每个名字都有自己的独立声明语句。","source":"_posts/C-标准库笔笔记-一.md","raw":"---\ntitle: C++标准库笔笔记_一\ndate: 2022-03-02 21:38:40\ntags:\n        - 编程相关\n        - C++\n        - C++标准库\n---\n\n<center>\n\n# C++标准库笔记(一)\n\n</center>\n\n## 什么是C++标准库\n\nC++标准库是一组C++模板类，它提供了通用的编程数据结构和函数，如链表、堆、数组、算法、迭代器和任何其他你可以想到的C++组件。C++标准库也包含了C标准库，并在C++标准中进行了定义(例如C++11标准)。\n\n## 如何使用C++标准库\n\n在C++源码中标准库通常在最前端进行引用，具体如下：\n\n```c++\n#include <iostearm>\n```\n\n其中“#”表示预处理，也就是在编译前的预处理阶段执行这部分操作。\"include\"表示引用，而<iostearm>则是标准库名(顺便一说如果使用自己写的库文件引用时使用“”而不是<>)。\n\n## 关于iostearm库\n\nio即输入(in)输出(out)，iostearm库中包含两个基础类型istearm和ostearm，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。术语“流”(stearm)想要表达的是：*随着时间的推移，字符是顺序生成或消耗的。*\n标准库定义流4个IO对象。为了处理输入，使用一个名为cin的istearm类型的对象。这个对象也被成为标准输入(standard input)。对于输出，使用一个名为cout的ostearm类型的对象，此对象也被称为标准输出(standard output)。此外，标准库还定义了两个ostearm对象分别为cerr和clog，cerr通常用来输出警告和错误信息，clog通常用来输出程序运行时的一般信息，如日志等。\n系统通常将程序所运行的窗口与这些对象关联起来。因此，当我们读取cin，数据将从程序正在运行的窗口读入，而输出时则会写入到同一个窗口。\n另外，标准库中使用的所有名字均定义在命名空间std中，使用时需要在名字前加作用域，如`std::cin`等，又或者可在程序前端使用using声明，如：\n```c++\nusing std::cin;\nusing std::cout;\n```\n最好每个名字都有自己的独立声明语句。","slug":"C-标准库笔笔记-一","published":1,"updated":"2022-03-02T13:48:50.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7tou50000mkv00vun7ix3","content":"<center>\n\n<h1 id=\"C-标准库笔记-一\"><a href=\"#C-标准库笔记-一\" class=\"headerlink\" title=\"C++标准库笔记(一)\"></a>C++标准库笔记(一)</h1></center>\n\n<h2 id=\"什么是C-标准库\"><a href=\"#什么是C-标准库\" class=\"headerlink\" title=\"什么是C++标准库\"></a>什么是C++标准库</h2><p>C++标准库是一组C++模板类，它提供了通用的编程数据结构和函数，如链表、堆、数组、算法、迭代器和任何其他你可以想到的C++组件。C++标准库也包含了C标准库，并在C++标准中进行了定义(例如C++11标准)。</p>\n<h2 id=\"如何使用C-标准库\"><a href=\"#如何使用C-标准库\" class=\"headerlink\" title=\"如何使用C++标准库\"></a>如何使用C++标准库</h2><p>在C++源码中标准库通常在最前端进行引用，具体如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostearm&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>其中“#”表示预处理，也就是在编译前的预处理阶段执行这部分操作。”include”表示引用，而<iostearm>则是标准库名(顺便一说如果使用自己写的库文件引用时使用“”而不是&lt;&gt;)。</p>\n<h2 id=\"关于iostearm库\"><a href=\"#关于iostearm库\" class=\"headerlink\" title=\"关于iostearm库\"></a>关于iostearm库</h2><p>io即输入(in)输出(out)，iostearm库中包含两个基础类型istearm和ostearm，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。术语“流”(stearm)想要表达的是：<em>随着时间的推移，字符是顺序生成或消耗的。</em><br>标准库定义流4个IO对象。为了处理输入，使用一个名为cin的istearm类型的对象。这个对象也被成为标准输入(standard input)。对于输出，使用一个名为cout的ostearm类型的对象，此对象也被称为标准输出(standard output)。此外，标准库还定义了两个ostearm对象分别为cerr和clog，cerr通常用来输出警告和错误信息，clog通常用来输出程序运行时的一般信息，如日志等。<br>系统通常将程序所运行的窗口与这些对象关联起来。因此，当我们读取cin，数据将从程序正在运行的窗口读入，而输出时则会写入到同一个窗口。<br>另外，标准库中使用的所有名字均定义在命名空间std中，使用时需要在名字前加作用域，如<code>std::cin</code>等，又或者可在程序前端使用using声明，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> std::cin;</span><br><span class=\"line\"><span class=\"keyword\">using</span> std::cout;</span><br></pre></td></tr></table></figure>\n<p>最好每个名字都有自己的独立声明语句。</p>\n","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"C-标准库笔记-一\"><a href=\"#C-标准库笔记-一\" class=\"headerlink\" title=\"C++标准库笔记(一)\"></a>C++标准库笔记(一)</h1></center>\n\n<h2 id=\"什么是C-标准库\"><a href=\"#什么是C-标准库\" class=\"headerlink\" title=\"什么是C++标准库\"></a>什么是C++标准库</h2><p>C++标准库是一组C++模板类，它提供了通用的编程数据结构和函数，如链表、堆、数组、算法、迭代器和任何其他你可以想到的C++组件。C++标准库也包含了C标准库，并在C++标准中进行了定义(例如C++11标准)。</p>\n<h2 id=\"如何使用C-标准库\"><a href=\"#如何使用C-标准库\" class=\"headerlink\" title=\"如何使用C++标准库\"></a>如何使用C++标准库</h2><p>在C++源码中标准库通常在最前端进行引用，具体如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostearm&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>其中“#”表示预处理，也就是在编译前的预处理阶段执行这部分操作。”include”表示引用，而<iostearm>则是标准库名(顺便一说如果使用自己写的库文件引用时使用“”而不是&lt;&gt;)。</p>\n<h2 id=\"关于iostearm库\"><a href=\"#关于iostearm库\" class=\"headerlink\" title=\"关于iostearm库\"></a>关于iostearm库</h2><p>io即输入(in)输出(out)，iostearm库中包含两个基础类型istearm和ostearm，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。术语“流”(stearm)想要表达的是：<em>随着时间的推移，字符是顺序生成或消耗的。</em><br>标准库定义流4个IO对象。为了处理输入，使用一个名为cin的istearm类型的对象。这个对象也被成为标准输入(standard input)。对于输出，使用一个名为cout的ostearm类型的对象，此对象也被称为标准输出(standard output)。此外，标准库还定义了两个ostearm对象分别为cerr和clog，cerr通常用来输出警告和错误信息，clog通常用来输出程序运行时的一般信息，如日志等。<br>系统通常将程序所运行的窗口与这些对象关联起来。因此，当我们读取cin，数据将从程序正在运行的窗口读入，而输出时则会写入到同一个窗口。<br>另外，标准库中使用的所有名字均定义在命名空间std中，使用时需要在名字前加作用域，如<code>std::cin</code>等，又或者可在程序前端使用using声明，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> std::cin;</span><br><span class=\"line\"><span class=\"keyword\">using</span> std::cout;</span><br></pre></td></tr></table></figure>\n<p>最好每个名字都有自己的独立声明语句。</p>\n"},{"title":"C++标准库笔笔记_三","date":"2022-03-02T13:40:54.000Z","_content":"<center>\n\n# C++标准库笔记(三)\n\n</center>\n\n## 什么是vector\n\n标准库类型vector表示对象的集合，其中所有对象的类型都相同。集合中每个对象都有一个与之对应的索引，索引用于访问对象。因为vector\"容纳着\"别的对象，所以它也常被称作容器。\n\n想要使用vector，必须包含适当的头文件。在后续的示例中都假定做了如下using声明：\n\n```c++\n#include <vector>\nusing std::vector;\n```\n\nC++既有类模板也有函数模板，其中vector是一个类模板。模板本身不是类或函数，相反可以将模板看作为编译器生成类或者函数编写的一份说明。编译器根据模板创建类或函数的过程称作实例化，当使用模板时，需要指定编译器需要把类或函数实例化为何种类型。\n\n对于类模板来说，我们通过提供一些额外的信息来指定模板到底要实例化成什么样的类，需要提供那些信息由模板决定。提供信息的方式总是这样：在模板名字后面跟一对尖括号，在括号内放上信息。\n\n以vector为例，如下：\n\n```c++\nvector<int> ivec;               //ivec保存int类型的对象\nvector<string> file;            //file保存string类型的对象\n```\n\nvector能容纳绝大多数类型的对象作为其元素，但是因为引用不是对象，所以不存在包含引用的vector。除此之外，其他大多数(非引用)内置类型和类类型都可以构成vector对象，甚至组成vector的元素也可以是vector。\n\n## 定义和初始化vector对象\n\n常用方法如下：\n\n```c++\nvector<T> v1;                   //v1是一个空vector，它潜在的元素是T类型的，执行默认初始化\nvector<T> v2(v1);               //v2中包含有v1所有元素的副本\nvector<T> v2 = v1;              //等价于v2(v1)，v2中包含有v1所有元素的副本\nvector<T> v3(n, val);           //v3中包含有n个重复的元素，每个值都是val\nvector<T> v4(n);                //v4中包含n个重复的执行了值初始化的对象\nvector<T> v5{a,b,c...};         //v5包含了初始值个数的元素，每个元素被赋予相应的初始值\nvector<T> v5 = {a,b,c...};      //等价于v5{a,b,c...}\n```\n\n值初始化一般是三种处理方式：\n~ 如果T有用户定义的缺省构造函数，直接调用；\n如果T有编译器生成的缺省构造函数，先0值初始化再调用；\n如果T根本不是类，直接0值初始化。\n\n## 向vector对象添加元素\n\n一般来说，使用vectori时是先初始化一个空vector，然后使用push_back函数向其中添加元素。push_back函数是vector的成员函数之一，负责把一个值当作vector的尾部元素\"压入\"到vector对象的尾端。\n\n*注意:vector对象在运行时能高效快速的添加元素，因此在定义vector对象时设定其大小也就没什么必要了。*\n\n## 其他vector操作\n\nvector提供的操作大多数都和string的相关操作类似，如下：\n\n```c++\nv.empty();              //如果v不含有任何元素，返回true，否则返回false\nv.size():               //返回v中元素的个数\nv.puth_back(t);         //向v的尾端添加一个值为t的元素\nv[n];                   //返回v中第n个位置上元素的引用\nv1 = v2;                //用v2中的元素的拷贝替换v1中的元素\nv1 = {a,b,c...};        //用列表中元素的字面值替换v1中的元素\nv1 == v2;               //v1和v2相等当且仅当它们的元素数量相同且对应位置的元素值都相同时\nv1 != v2;               //v1和v2的元素数量不相同或对应位置的元素值有不相同\n<,<=,>,>=;              //以字典顺序进行比较\n```\n\n访问vector对象中元素的方法也和string对象一样，如：\n\n```c++\nfor (auto &i : v)\n{\n        i *= i;\n}\n```\n\n*不能通过下标来添加元素。*\n\n*只能对已经存在的元素执行下标操作。*\n\n## 关于迭代器\n\n所有的标准库容器都支持迭代器，但是只有其中的少数几种才同时支持下标操作。\n\n类似于i指针类型，迭代器也提供了对象的间接访问，但和指针不同的是，获取迭代器不是使用取地址符，有迭代器的类型同时拥有返回迭代器的成员。比如，这些类型都有名为begin和end的成员，其中begin成员负责返回指向第一个元素的迭代器，而end成员负责返回指向容器\"尾元素的下一个位置\"的迭代器。\n\n## 迭代器的运算\n\n如下是一些关于迭代器的运算：\n\n```c++\n*iter;                  //返回迭代器iter所指向的元素\niter -> men;            //解引用iter并获取该元素名为men的成员，等价于(*iter).men\n++iter;                 //令iter指向容器的下一个元素\n--iter;                 //令iter指向容器的上一个元素\niter1 == iter2;         //判断两个迭代器i是否相等，若两个迭代器指向的同一个元素或为同一个容器的尾后迭代器，则为true，反之为false\niter1 != iter2;         //判断两个迭代器i是否不相等，若两个迭代器不指向指向的同一个元素且不为同一个容器的尾后迭代器，则为true，反之为false\niter + n;               //迭代器加上一个迭代器仍得一个迭代器，迭代器向前移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置\niter - n;               //迭代器减去一个迭代器仍得一个迭代器，迭代器向后移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置\niter1 += n;             //迭代器加法的复合赋值语句，将iter1加n的结果赋给iter1\niter1 -= n;             //迭代器减法的复合赋值语句，将iter1减n的结果赋给iter1\niter1 - iter2;          //两个迭代器相减的结果是它们之间的距离，也就是说，也就是说将运算符右侧的迭代器向前移动几个元素得到运算符左侧的迭代器。两个迭代器必须指向同一个容器。\n>,>=,<,<=;              //关系运算符，如果某迭代器指向的元素位置在另一个迭代器之前，则说前者小于后者。两个迭代器必须指向同一个容器。\n```\n\n## 如何定义一个迭代器\n\n实际上，那些能够使用迭代器的标准库类型使用iterator或者const_iterater来表示迭代器的类型，如下：\n\n```c++\nvector<int>::iterater it;               //it能读写vector<int>的元素\nstring::iterator it2;                   //it2能读写string的字符\n\nvector<int>::const_iterator it3;        //it3只能读取元素，不能写入\nstring::const_iterator i4;              //it4只能读取字符，不能写入\n```\n\n*关于iterator和const_iterater，在使用begin和end返回迭代器时，返回的迭代器类型与容器本身的类型有关，若容器本身是const常量，则返回const_iterater类型，否则返回iterator类型。*\n\n*任何一种可能会改变vecter对象容量的操作都会使该对象的迭代器失效。*\n","source":"_posts/C-标准库笔笔记-三.md","raw":"---\ntitle: C++标准库笔笔记_三\ndate: 2022-03-02 21:40:54\ntags:\n        - 编程相关\n        - C++\n        - C++标准库\n---\n<center>\n\n# C++标准库笔记(三)\n\n</center>\n\n## 什么是vector\n\n标准库类型vector表示对象的集合，其中所有对象的类型都相同。集合中每个对象都有一个与之对应的索引，索引用于访问对象。因为vector\"容纳着\"别的对象，所以它也常被称作容器。\n\n想要使用vector，必须包含适当的头文件。在后续的示例中都假定做了如下using声明：\n\n```c++\n#include <vector>\nusing std::vector;\n```\n\nC++既有类模板也有函数模板，其中vector是一个类模板。模板本身不是类或函数，相反可以将模板看作为编译器生成类或者函数编写的一份说明。编译器根据模板创建类或函数的过程称作实例化，当使用模板时，需要指定编译器需要把类或函数实例化为何种类型。\n\n对于类模板来说，我们通过提供一些额外的信息来指定模板到底要实例化成什么样的类，需要提供那些信息由模板决定。提供信息的方式总是这样：在模板名字后面跟一对尖括号，在括号内放上信息。\n\n以vector为例，如下：\n\n```c++\nvector<int> ivec;               //ivec保存int类型的对象\nvector<string> file;            //file保存string类型的对象\n```\n\nvector能容纳绝大多数类型的对象作为其元素，但是因为引用不是对象，所以不存在包含引用的vector。除此之外，其他大多数(非引用)内置类型和类类型都可以构成vector对象，甚至组成vector的元素也可以是vector。\n\n## 定义和初始化vector对象\n\n常用方法如下：\n\n```c++\nvector<T> v1;                   //v1是一个空vector，它潜在的元素是T类型的，执行默认初始化\nvector<T> v2(v1);               //v2中包含有v1所有元素的副本\nvector<T> v2 = v1;              //等价于v2(v1)，v2中包含有v1所有元素的副本\nvector<T> v3(n, val);           //v3中包含有n个重复的元素，每个值都是val\nvector<T> v4(n);                //v4中包含n个重复的执行了值初始化的对象\nvector<T> v5{a,b,c...};         //v5包含了初始值个数的元素，每个元素被赋予相应的初始值\nvector<T> v5 = {a,b,c...};      //等价于v5{a,b,c...}\n```\n\n值初始化一般是三种处理方式：\n~ 如果T有用户定义的缺省构造函数，直接调用；\n如果T有编译器生成的缺省构造函数，先0值初始化再调用；\n如果T根本不是类，直接0值初始化。\n\n## 向vector对象添加元素\n\n一般来说，使用vectori时是先初始化一个空vector，然后使用push_back函数向其中添加元素。push_back函数是vector的成员函数之一，负责把一个值当作vector的尾部元素\"压入\"到vector对象的尾端。\n\n*注意:vector对象在运行时能高效快速的添加元素，因此在定义vector对象时设定其大小也就没什么必要了。*\n\n## 其他vector操作\n\nvector提供的操作大多数都和string的相关操作类似，如下：\n\n```c++\nv.empty();              //如果v不含有任何元素，返回true，否则返回false\nv.size():               //返回v中元素的个数\nv.puth_back(t);         //向v的尾端添加一个值为t的元素\nv[n];                   //返回v中第n个位置上元素的引用\nv1 = v2;                //用v2中的元素的拷贝替换v1中的元素\nv1 = {a,b,c...};        //用列表中元素的字面值替换v1中的元素\nv1 == v2;               //v1和v2相等当且仅当它们的元素数量相同且对应位置的元素值都相同时\nv1 != v2;               //v1和v2的元素数量不相同或对应位置的元素值有不相同\n<,<=,>,>=;              //以字典顺序进行比较\n```\n\n访问vector对象中元素的方法也和string对象一样，如：\n\n```c++\nfor (auto &i : v)\n{\n        i *= i;\n}\n```\n\n*不能通过下标来添加元素。*\n\n*只能对已经存在的元素执行下标操作。*\n\n## 关于迭代器\n\n所有的标准库容器都支持迭代器，但是只有其中的少数几种才同时支持下标操作。\n\n类似于i指针类型，迭代器也提供了对象的间接访问，但和指针不同的是，获取迭代器不是使用取地址符，有迭代器的类型同时拥有返回迭代器的成员。比如，这些类型都有名为begin和end的成员，其中begin成员负责返回指向第一个元素的迭代器，而end成员负责返回指向容器\"尾元素的下一个位置\"的迭代器。\n\n## 迭代器的运算\n\n如下是一些关于迭代器的运算：\n\n```c++\n*iter;                  //返回迭代器iter所指向的元素\niter -> men;            //解引用iter并获取该元素名为men的成员，等价于(*iter).men\n++iter;                 //令iter指向容器的下一个元素\n--iter;                 //令iter指向容器的上一个元素\niter1 == iter2;         //判断两个迭代器i是否相等，若两个迭代器指向的同一个元素或为同一个容器的尾后迭代器，则为true，反之为false\niter1 != iter2;         //判断两个迭代器i是否不相等，若两个迭代器不指向指向的同一个元素且不为同一个容器的尾后迭代器，则为true，反之为false\niter + n;               //迭代器加上一个迭代器仍得一个迭代器，迭代器向前移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置\niter - n;               //迭代器减去一个迭代器仍得一个迭代器，迭代器向后移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置\niter1 += n;             //迭代器加法的复合赋值语句，将iter1加n的结果赋给iter1\niter1 -= n;             //迭代器减法的复合赋值语句，将iter1减n的结果赋给iter1\niter1 - iter2;          //两个迭代器相减的结果是它们之间的距离，也就是说，也就是说将运算符右侧的迭代器向前移动几个元素得到运算符左侧的迭代器。两个迭代器必须指向同一个容器。\n>,>=,<,<=;              //关系运算符，如果某迭代器指向的元素位置在另一个迭代器之前，则说前者小于后者。两个迭代器必须指向同一个容器。\n```\n\n## 如何定义一个迭代器\n\n实际上，那些能够使用迭代器的标准库类型使用iterator或者const_iterater来表示迭代器的类型，如下：\n\n```c++\nvector<int>::iterater it;               //it能读写vector<int>的元素\nstring::iterator it2;                   //it2能读写string的字符\n\nvector<int>::const_iterator it3;        //it3只能读取元素，不能写入\nstring::const_iterator i4;              //it4只能读取字符，不能写入\n```\n\n*关于iterator和const_iterater，在使用begin和end返回迭代器时，返回的迭代器类型与容器本身的类型有关，若容器本身是const常量，则返回const_iterater类型，否则返回iterator类型。*\n\n*任何一种可能会改变vecter对象容量的操作都会使该对象的迭代器失效。*\n","slug":"C-标准库笔笔记-三","published":1,"updated":"2022-03-02T13:48:35.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7toub0001mkv0182bd3fd","content":"<center>\n\n<h1 id=\"C-标准库笔记-三\"><a href=\"#C-标准库笔记-三\" class=\"headerlink\" title=\"C++标准库笔记(三)\"></a>C++标准库笔记(三)</h1></center>\n\n<h2 id=\"什么是vector\"><a href=\"#什么是vector\" class=\"headerlink\" title=\"什么是vector\"></a>什么是vector</h2><p>标准库类型vector表示对象的集合，其中所有对象的类型都相同。集合中每个对象都有一个与之对应的索引，索引用于访问对象。因为vector”容纳着”别的对象，所以它也常被称作容器。</p>\n<p>想要使用vector，必须包含适当的头文件。在后续的示例中都假定做了如下using声明：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::vector;</span><br></pre></td></tr></table></figure>\n\n<p>C++既有类模板也有函数模板，其中vector是一个类模板。模板本身不是类或函数，相反可以将模板看作为编译器生成类或者函数编写的一份说明。编译器根据模板创建类或函数的过程称作实例化，当使用模板时，需要指定编译器需要把类或函数实例化为何种类型。</p>\n<p>对于类模板来说，我们通过提供一些额外的信息来指定模板到底要实例化成什么样的类，需要提供那些信息由模板决定。提供信息的方式总是这样：在模板名字后面跟一对尖括号，在括号内放上信息。</p>\n<p>以vector为例，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ivec;               <span class=\"comment\">//ivec保存int类型的对象</span></span><br><span class=\"line\">vector&lt;string&gt; file;            <span class=\"comment\">//file保存string类型的对象</span></span><br></pre></td></tr></table></figure>\n\n<p>vector能容纳绝大多数类型的对象作为其元素，但是因为引用不是对象，所以不存在包含引用的vector。除此之外，其他大多数(非引用)内置类型和类类型都可以构成vector对象，甚至组成vector的元素也可以是vector。</p>\n<h2 id=\"定义和初始化vector对象\"><a href=\"#定义和初始化vector对象\" class=\"headerlink\" title=\"定义和初始化vector对象\"></a>定义和初始化vector对象</h2><p>常用方法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;T&gt; v1;                   <span class=\"comment\">//v1是一个空vector，它潜在的元素是T类型的，执行默认初始化</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;T&gt; <span class=\"title\">v2</span><span class=\"params\">(v1)</span></span>;               <span class=\"comment\">//v2中包含有v1所有元素的副本</span></span><br><span class=\"line\">vector&lt;T&gt; v2 = v1;              <span class=\"comment\">//等价于v2(v1)，v2中包含有v1所有元素的副本</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;T&gt; <span class=\"title\">v3</span><span class=\"params\">(n, val)</span></span>;           <span class=\"comment\">//v3中包含有n个重复的元素，每个值都是val</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;T&gt; <span class=\"title\">v4</span><span class=\"params\">(n)</span></span>;                <span class=\"comment\">//v4中包含n个重复的执行了值初始化的对象</span></span><br><span class=\"line\">vector&lt;T&gt; v5&#123;a,b,c...&#125;;         <span class=\"comment\">//v5包含了初始值个数的元素，每个元素被赋予相应的初始值</span></span><br><span class=\"line\">vector&lt;T&gt; v5 = &#123;a,b,c...&#125;;      <span class=\"comment\">//等价于v5&#123;a,b,c...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>值初始化一般是三种处理方式：<br>~ 如果T有用户定义的缺省构造函数，直接调用；<br>如果T有编译器生成的缺省构造函数，先0值初始化再调用；<br>如果T根本不是类，直接0值初始化。</p>\n<h2 id=\"向vector对象添加元素\"><a href=\"#向vector对象添加元素\" class=\"headerlink\" title=\"向vector对象添加元素\"></a>向vector对象添加元素</h2><p>一般来说，使用vectori时是先初始化一个空vector，然后使用push_back函数向其中添加元素。push_back函数是vector的成员函数之一，负责把一个值当作vector的尾部元素”压入”到vector对象的尾端。</p>\n<p><em>注意:vector对象在运行时能高效快速的添加元素，因此在定义vector对象时设定其大小也就没什么必要了。</em></p>\n<h2 id=\"其他vector操作\"><a href=\"#其他vector操作\" class=\"headerlink\" title=\"其他vector操作\"></a>其他vector操作</h2><p>vector提供的操作大多数都和string的相关操作类似，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v.<span class=\"built_in\">empty</span>();              <span class=\"comment\">//如果v不含有任何元素，返回true，否则返回false</span></span><br><span class=\"line\">v.<span class=\"built_in\">size</span>():               <span class=\"comment\">//返回v中元素的个数</span></span><br><span class=\"line\">v.<span class=\"built_in\">puth_back</span>(t);         <span class=\"comment\">//向v的尾端添加一个值为t的元素</span></span><br><span class=\"line\">v[n];                   <span class=\"comment\">//返回v中第n个位置上元素的引用</span></span><br><span class=\"line\">v1 = v2;                <span class=\"comment\">//用v2中的元素的拷贝替换v1中的元素</span></span><br><span class=\"line\">v1 = &#123;a,b,c...&#125;;        <span class=\"comment\">//用列表中元素的字面值替换v1中的元素</span></span><br><span class=\"line\">v1 == v2;               <span class=\"comment\">//v1和v2相等当且仅当它们的元素数量相同且对应位置的元素值都相同时</span></span><br><span class=\"line\">v1 != v2;               <span class=\"comment\">//v1和v2的元素数量不相同或对应位置的元素值有不相同</span></span><br><span class=\"line\">&lt;,&lt;=,&gt;,&gt;=;              <span class=\"comment\">//以字典顺序进行比较</span></span><br></pre></td></tr></table></figure>\n\n<p>访问vector对象中元素的方法也和string对象一样，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        i *= i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>不能通过下标来添加元素。</em></p>\n<p><em>只能对已经存在的元素执行下标操作。</em></p>\n<h2 id=\"关于迭代器\"><a href=\"#关于迭代器\" class=\"headerlink\" title=\"关于迭代器\"></a>关于迭代器</h2><p>所有的标准库容器都支持迭代器，但是只有其中的少数几种才同时支持下标操作。</p>\n<p>类似于i指针类型，迭代器也提供了对象的间接访问，但和指针不同的是，获取迭代器不是使用取地址符，有迭代器的类型同时拥有返回迭代器的成员。比如，这些类型都有名为begin和end的成员，其中begin成员负责返回指向第一个元素的迭代器，而end成员负责返回指向容器”尾元素的下一个位置”的迭代器。</p>\n<h2 id=\"迭代器的运算\"><a href=\"#迭代器的运算\" class=\"headerlink\" title=\"迭代器的运算\"></a>迭代器的运算</h2><p>如下是一些关于迭代器的运算：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*iter;                  <span class=\"comment\">//返回迭代器iter所指向的元素</span></span><br><span class=\"line\">iter -&gt; men;            <span class=\"comment\">//解引用iter并获取该元素名为men的成员，等价于(*iter).men</span></span><br><span class=\"line\">++iter;                 <span class=\"comment\">//令iter指向容器的下一个元素</span></span><br><span class=\"line\">--iter;                 <span class=\"comment\">//令iter指向容器的上一个元素</span></span><br><span class=\"line\">iter1 == iter2;         <span class=\"comment\">//判断两个迭代器i是否相等，若两个迭代器指向的同一个元素或为同一个容器的尾后迭代器，则为true，反之为false</span></span><br><span class=\"line\">iter1 != iter2;         <span class=\"comment\">//判断两个迭代器i是否不相等，若两个迭代器不指向指向的同一个元素且不为同一个容器的尾后迭代器，则为true，反之为false</span></span><br><span class=\"line\">iter + n;               <span class=\"comment\">//迭代器加上一个迭代器仍得一个迭代器，迭代器向前移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置</span></span><br><span class=\"line\">iter - n;               <span class=\"comment\">//迭代器减去一个迭代器仍得一个迭代器，迭代器向后移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置</span></span><br><span class=\"line\">iter1 += n;             <span class=\"comment\">//迭代器加法的复合赋值语句，将iter1加n的结果赋给iter1</span></span><br><span class=\"line\">iter1 -= n;             <span class=\"comment\">//迭代器减法的复合赋值语句，将iter1减n的结果赋给iter1</span></span><br><span class=\"line\">iter1 - iter2;          <span class=\"comment\">//两个迭代器相减的结果是它们之间的距离，也就是说，也就是说将运算符右侧的迭代器向前移动几个元素得到运算符左侧的迭代器。两个迭代器必须指向同一个容器。</span></span><br><span class=\"line\">&gt;,&gt;=,&lt;,&lt;=;              <span class=\"comment\">//关系运算符，如果某迭代器指向的元素位置在另一个迭代器之前，则说前者小于后者。两个迭代器必须指向同一个容器。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何定义一个迭代器\"><a href=\"#如何定义一个迭代器\" class=\"headerlink\" title=\"如何定义一个迭代器\"></a>如何定义一个迭代器</h2><p>实际上，那些能够使用迭代器的标准库类型使用iterator或者const_iterater来表示迭代器的类型，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterater it;               <span class=\"comment\">//it能读写vector&lt;int&gt;的元素</span></span><br><span class=\"line\">string::iterator it2;                   <span class=\"comment\">//it2能读写string的字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::const_iterator it3;        <span class=\"comment\">//it3只能读取元素，不能写入</span></span><br><span class=\"line\">string::const_iterator i4;              <span class=\"comment\">//it4只能读取字符，不能写入</span></span><br></pre></td></tr></table></figure>\n\n<p><em>关于iterator和const_iterater，在使用begin和end返回迭代器时，返回的迭代器类型与容器本身的类型有关，若容器本身是const常量，则返回const_iterater类型，否则返回iterator类型。</em></p>\n<p><em>任何一种可能会改变vecter对象容量的操作都会使该对象的迭代器失效。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"C-标准库笔记-三\"><a href=\"#C-标准库笔记-三\" class=\"headerlink\" title=\"C++标准库笔记(三)\"></a>C++标准库笔记(三)</h1></center>\n\n<h2 id=\"什么是vector\"><a href=\"#什么是vector\" class=\"headerlink\" title=\"什么是vector\"></a>什么是vector</h2><p>标准库类型vector表示对象的集合，其中所有对象的类型都相同。集合中每个对象都有一个与之对应的索引，索引用于访问对象。因为vector”容纳着”别的对象，所以它也常被称作容器。</p>\n<p>想要使用vector，必须包含适当的头文件。在后续的示例中都假定做了如下using声明：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::vector;</span><br></pre></td></tr></table></figure>\n\n<p>C++既有类模板也有函数模板，其中vector是一个类模板。模板本身不是类或函数，相反可以将模板看作为编译器生成类或者函数编写的一份说明。编译器根据模板创建类或函数的过程称作实例化，当使用模板时，需要指定编译器需要把类或函数实例化为何种类型。</p>\n<p>对于类模板来说，我们通过提供一些额外的信息来指定模板到底要实例化成什么样的类，需要提供那些信息由模板决定。提供信息的方式总是这样：在模板名字后面跟一对尖括号，在括号内放上信息。</p>\n<p>以vector为例，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ivec;               <span class=\"comment\">//ivec保存int类型的对象</span></span><br><span class=\"line\">vector&lt;string&gt; file;            <span class=\"comment\">//file保存string类型的对象</span></span><br></pre></td></tr></table></figure>\n\n<p>vector能容纳绝大多数类型的对象作为其元素，但是因为引用不是对象，所以不存在包含引用的vector。除此之外，其他大多数(非引用)内置类型和类类型都可以构成vector对象，甚至组成vector的元素也可以是vector。</p>\n<h2 id=\"定义和初始化vector对象\"><a href=\"#定义和初始化vector对象\" class=\"headerlink\" title=\"定义和初始化vector对象\"></a>定义和初始化vector对象</h2><p>常用方法如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;T&gt; v1;                   <span class=\"comment\">//v1是一个空vector，它潜在的元素是T类型的，执行默认初始化</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;T&gt; <span class=\"title\">v2</span><span class=\"params\">(v1)</span></span>;               <span class=\"comment\">//v2中包含有v1所有元素的副本</span></span><br><span class=\"line\">vector&lt;T&gt; v2 = v1;              <span class=\"comment\">//等价于v2(v1)，v2中包含有v1所有元素的副本</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;T&gt; <span class=\"title\">v3</span><span class=\"params\">(n, val)</span></span>;           <span class=\"comment\">//v3中包含有n个重复的元素，每个值都是val</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;T&gt; <span class=\"title\">v4</span><span class=\"params\">(n)</span></span>;                <span class=\"comment\">//v4中包含n个重复的执行了值初始化的对象</span></span><br><span class=\"line\">vector&lt;T&gt; v5&#123;a,b,c...&#125;;         <span class=\"comment\">//v5包含了初始值个数的元素，每个元素被赋予相应的初始值</span></span><br><span class=\"line\">vector&lt;T&gt; v5 = &#123;a,b,c...&#125;;      <span class=\"comment\">//等价于v5&#123;a,b,c...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>值初始化一般是三种处理方式：<br>~ 如果T有用户定义的缺省构造函数，直接调用；<br>如果T有编译器生成的缺省构造函数，先0值初始化再调用；<br>如果T根本不是类，直接0值初始化。</p>\n<h2 id=\"向vector对象添加元素\"><a href=\"#向vector对象添加元素\" class=\"headerlink\" title=\"向vector对象添加元素\"></a>向vector对象添加元素</h2><p>一般来说，使用vectori时是先初始化一个空vector，然后使用push_back函数向其中添加元素。push_back函数是vector的成员函数之一，负责把一个值当作vector的尾部元素”压入”到vector对象的尾端。</p>\n<p><em>注意:vector对象在运行时能高效快速的添加元素，因此在定义vector对象时设定其大小也就没什么必要了。</em></p>\n<h2 id=\"其他vector操作\"><a href=\"#其他vector操作\" class=\"headerlink\" title=\"其他vector操作\"></a>其他vector操作</h2><p>vector提供的操作大多数都和string的相关操作类似，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v.<span class=\"built_in\">empty</span>();              <span class=\"comment\">//如果v不含有任何元素，返回true，否则返回false</span></span><br><span class=\"line\">v.<span class=\"built_in\">size</span>():               <span class=\"comment\">//返回v中元素的个数</span></span><br><span class=\"line\">v.<span class=\"built_in\">puth_back</span>(t);         <span class=\"comment\">//向v的尾端添加一个值为t的元素</span></span><br><span class=\"line\">v[n];                   <span class=\"comment\">//返回v中第n个位置上元素的引用</span></span><br><span class=\"line\">v1 = v2;                <span class=\"comment\">//用v2中的元素的拷贝替换v1中的元素</span></span><br><span class=\"line\">v1 = &#123;a,b,c...&#125;;        <span class=\"comment\">//用列表中元素的字面值替换v1中的元素</span></span><br><span class=\"line\">v1 == v2;               <span class=\"comment\">//v1和v2相等当且仅当它们的元素数量相同且对应位置的元素值都相同时</span></span><br><span class=\"line\">v1 != v2;               <span class=\"comment\">//v1和v2的元素数量不相同或对应位置的元素值有不相同</span></span><br><span class=\"line\">&lt;,&lt;=,&gt;,&gt;=;              <span class=\"comment\">//以字典顺序进行比较</span></span><br></pre></td></tr></table></figure>\n\n<p>访问vector对象中元素的方法也和string对象一样，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        i *= i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>不能通过下标来添加元素。</em></p>\n<p><em>只能对已经存在的元素执行下标操作。</em></p>\n<h2 id=\"关于迭代器\"><a href=\"#关于迭代器\" class=\"headerlink\" title=\"关于迭代器\"></a>关于迭代器</h2><p>所有的标准库容器都支持迭代器，但是只有其中的少数几种才同时支持下标操作。</p>\n<p>类似于i指针类型，迭代器也提供了对象的间接访问，但和指针不同的是，获取迭代器不是使用取地址符，有迭代器的类型同时拥有返回迭代器的成员。比如，这些类型都有名为begin和end的成员，其中begin成员负责返回指向第一个元素的迭代器，而end成员负责返回指向容器”尾元素的下一个位置”的迭代器。</p>\n<h2 id=\"迭代器的运算\"><a href=\"#迭代器的运算\" class=\"headerlink\" title=\"迭代器的运算\"></a>迭代器的运算</h2><p>如下是一些关于迭代器的运算：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*iter;                  <span class=\"comment\">//返回迭代器iter所指向的元素</span></span><br><span class=\"line\">iter -&gt; men;            <span class=\"comment\">//解引用iter并获取该元素名为men的成员，等价于(*iter).men</span></span><br><span class=\"line\">++iter;                 <span class=\"comment\">//令iter指向容器的下一个元素</span></span><br><span class=\"line\">--iter;                 <span class=\"comment\">//令iter指向容器的上一个元素</span></span><br><span class=\"line\">iter1 == iter2;         <span class=\"comment\">//判断两个迭代器i是否相等，若两个迭代器指向的同一个元素或为同一个容器的尾后迭代器，则为true，反之为false</span></span><br><span class=\"line\">iter1 != iter2;         <span class=\"comment\">//判断两个迭代器i是否不相等，若两个迭代器不指向指向的同一个元素且不为同一个容器的尾后迭代器，则为true，反之为false</span></span><br><span class=\"line\">iter + n;               <span class=\"comment\">//迭代器加上一个迭代器仍得一个迭代器，迭代器向前移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置</span></span><br><span class=\"line\">iter - n;               <span class=\"comment\">//迭代器减去一个迭代器仍得一个迭代器，迭代器向后移动了n个元素，结果迭代器指向容器内的一个元素或者容器尾的下一个位置</span></span><br><span class=\"line\">iter1 += n;             <span class=\"comment\">//迭代器加法的复合赋值语句，将iter1加n的结果赋给iter1</span></span><br><span class=\"line\">iter1 -= n;             <span class=\"comment\">//迭代器减法的复合赋值语句，将iter1减n的结果赋给iter1</span></span><br><span class=\"line\">iter1 - iter2;          <span class=\"comment\">//两个迭代器相减的结果是它们之间的距离，也就是说，也就是说将运算符右侧的迭代器向前移动几个元素得到运算符左侧的迭代器。两个迭代器必须指向同一个容器。</span></span><br><span class=\"line\">&gt;,&gt;=,&lt;,&lt;=;              <span class=\"comment\">//关系运算符，如果某迭代器指向的元素位置在另一个迭代器之前，则说前者小于后者。两个迭代器必须指向同一个容器。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何定义一个迭代器\"><a href=\"#如何定义一个迭代器\" class=\"headerlink\" title=\"如何定义一个迭代器\"></a>如何定义一个迭代器</h2><p>实际上，那些能够使用迭代器的标准库类型使用iterator或者const_iterater来表示迭代器的类型，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterater it;               <span class=\"comment\">//it能读写vector&lt;int&gt;的元素</span></span><br><span class=\"line\">string::iterator it2;                   <span class=\"comment\">//it2能读写string的字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::const_iterator it3;        <span class=\"comment\">//it3只能读取元素，不能写入</span></span><br><span class=\"line\">string::const_iterator i4;              <span class=\"comment\">//it4只能读取字符，不能写入</span></span><br></pre></td></tr></table></figure>\n\n<p><em>关于iterator和const_iterater，在使用begin和end返回迭代器时，返回的迭代器类型与容器本身的类型有关，若容器本身是const常量，则返回const_iterater类型，否则返回iterator类型。</em></p>\n<p><em>任何一种可能会改变vecter对象容量的操作都会使该对象的迭代器失效。</em></p>\n"},{"title":"在别人的小屋瞎想","date":"2022-03-02T13:33:12.000Z","_content":"<center>\n\n# 在别人的小巷旁瞎想  \n\n### ~致蛋蛋  \n\n*要我说这热闹的小巷*\n*不过二尺高的阳光*\n*榕树下翻腾的波浪*\n*煮不烂的琐碎时光*\n*这儿的绿叶飞扬*\n*这儿的人影匆忙*\n*这儿的海风荡浪*\n*我想*\n*或许这儿的街道也能通向远方*\n*我走过静谧的工园的夜*\n*我幻想着太阳升起的明天*\n*又或许是我想念*\n*海边铺着橡木地板的房间*\n*我坐在我遇见的第一辆公交车上*\n*看上车下车的人们的脸庞*\n*认真又迷惘*\n*或许是他们在流浪*\n*我忍不住这样想*\n*无奈且忧伤*\n*那边的太阳落下*\n*那些人张罗着回家*\n*那里的海岸风浪正大*\n*那路上混了个傻笑着迷了路的傻叉*\n*希望那傻叉是真傻*\n*未来的路上能了无牵挂*\n\n> 那是一只飞了一天的云雀  \n> 落在傍晚翠绿的桑\n\n</center>","source":"_posts/在别人的小屋瞎想.md","raw":"---\ntitle: 在别人的小屋瞎想\ndate: 2022-03-02 21:33:12\ntags: \n    - 致蛋蛋\n    - 一首小诗\n---\n<center>\n\n# 在别人的小巷旁瞎想  \n\n### ~致蛋蛋  \n\n*要我说这热闹的小巷*\n*不过二尺高的阳光*\n*榕树下翻腾的波浪*\n*煮不烂的琐碎时光*\n*这儿的绿叶飞扬*\n*这儿的人影匆忙*\n*这儿的海风荡浪*\n*我想*\n*或许这儿的街道也能通向远方*\n*我走过静谧的工园的夜*\n*我幻想着太阳升起的明天*\n*又或许是我想念*\n*海边铺着橡木地板的房间*\n*我坐在我遇见的第一辆公交车上*\n*看上车下车的人们的脸庞*\n*认真又迷惘*\n*或许是他们在流浪*\n*我忍不住这样想*\n*无奈且忧伤*\n*那边的太阳落下*\n*那些人张罗着回家*\n*那里的海岸风浪正大*\n*那路上混了个傻笑着迷了路的傻叉*\n*希望那傻叉是真傻*\n*未来的路上能了无牵挂*\n\n> 那是一只飞了一天的云雀  \n> 落在傍晚翠绿的桑\n\n</center>","slug":"在别人的小屋瞎想","published":1,"updated":"2022-03-02T13:47:07.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7touf0003mkv065254m5m","content":"<center>\n\n<h1 id=\"在别人的小巷旁瞎想\"><a href=\"#在别人的小巷旁瞎想\" class=\"headerlink\" title=\"在别人的小巷旁瞎想\"></a>在别人的小巷旁瞎想</h1><h3 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"~致蛋蛋\"></a>~致蛋蛋</h3><p><em>要我说这热闹的小巷</em><br><em>不过二尺高的阳光</em><br><em>榕树下翻腾的波浪</em><br><em>煮不烂的琐碎时光</em><br><em>这儿的绿叶飞扬</em><br><em>这儿的人影匆忙</em><br><em>这儿的海风荡浪</em><br><em>我想</em><br><em>或许这儿的街道也能通向远方</em><br><em>我走过静谧的工园的夜</em><br><em>我幻想着太阳升起的明天</em><br><em>又或许是我想念</em><br><em>海边铺着橡木地板的房间</em><br><em>我坐在我遇见的第一辆公交车上</em><br><em>看上车下车的人们的脸庞</em><br><em>认真又迷惘</em><br><em>或许是他们在流浪</em><br><em>我忍不住这样想</em><br><em>无奈且忧伤</em><br><em>那边的太阳落下</em><br><em>那些人张罗着回家</em><br><em>那里的海岸风浪正大</em><br><em>那路上混了个傻笑着迷了路的傻叉</em><br><em>希望那傻叉是真傻</em><br><em>未来的路上能了无牵挂</em></p>\n<blockquote>\n<p>那是一只飞了一天的云雀<br>落在傍晚翠绿的桑</p>\n</blockquote>\n</center>","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"在别人的小巷旁瞎想\"><a href=\"#在别人的小巷旁瞎想\" class=\"headerlink\" title=\"在别人的小巷旁瞎想\"></a>在别人的小巷旁瞎想</h1><h3 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"~致蛋蛋\"></a>~致蛋蛋</h3><p><em>要我说这热闹的小巷</em><br><em>不过二尺高的阳光</em><br><em>榕树下翻腾的波浪</em><br><em>煮不烂的琐碎时光</em><br><em>这儿的绿叶飞扬</em><br><em>这儿的人影匆忙</em><br><em>这儿的海风荡浪</em><br><em>我想</em><br><em>或许这儿的街道也能通向远方</em><br><em>我走过静谧的工园的夜</em><br><em>我幻想着太阳升起的明天</em><br><em>又或许是我想念</em><br><em>海边铺着橡木地板的房间</em><br><em>我坐在我遇见的第一辆公交车上</em><br><em>看上车下车的人们的脸庞</em><br><em>认真又迷惘</em><br><em>或许是他们在流浪</em><br><em>我忍不住这样想</em><br><em>无奈且忧伤</em><br><em>那边的太阳落下</em><br><em>那些人张罗着回家</em><br><em>那里的海岸风浪正大</em><br><em>那路上混了个傻笑着迷了路的傻叉</em><br><em>希望那傻叉是真傻</em><br><em>未来的路上能了无牵挂</em></p>\n<blockquote>\n<p>那是一只飞了一天的云雀<br>落在傍晚翠绿的桑</p>\n</blockquote>\n</center>"},{"title":"C++标准库笔笔记_二","date":"2022-03-02T13:39:36.000Z","_content":"\n<center>\n\n# C++标准库笔记(二)\n\n</center>\n\n## 标准库类型string\n\n标准库类型string表示可变长的字符序列，使用string类型必须首先包含string头文件。作为标准库的一部分，string定义在命名空间std中，接下来的所有示例都默认包含以下代码：\n\n```c++\n#include <string>\nusing std::string;\n```\n\n## 关于如何定义和初始化string对象\n\n定义的方式与其他变量的定义没有不同，初始化则有许多方式，如下：\n\n```c++\nstring s1;              //默认初始化，s1是一个空串\nstring s2(s1);          //s2是s1的副本\nstring s3 = s1;         //等价于s3(s1)，s3是s1的副本\nstring s4(\"value\");     //s4是字面值\"value\"的副本，除了字面值最后的那个空字符外\nstring s5 = \"value\";    //等价于s5(\"value\"),s5是字面值\"value\"的副本\nstring s6(n,\"c\");       //把s4初始化为由连续n个字符c组成的串\n```\n\n尽管如此，在c++11后，建议使用统一的方式进行变量的初始化，即在变量名后的大括号内写上变量的初始内容，比如：\n\n```c++\nstring s1{\"value\"};     //s1是字面值\"value\"的副本，除了字面值最后的那个空字符外\nstring s2{s1};          //s2是s1的副本\n```\n\n## string对象上的操作\n\n如下所示为基本的string对象操作：\n\n```c++\nos << s;                        //将s写入到输出流os中\nis >> s;                        //将输入流is中的数据写入到s中，到第一个空格为止\ngetline( is , s );              //将is中读取整行数据写入s中，包括空格\ns.empty();                      //判断对象s是否e为空，为空则返回true,不为空则返回false\ns.size();                       //返回s中字符的个数\ns[n];                           //返回s中第n个字符的引用，n从0开始记起\ns1 + s2;                        //将s1与s2首尾相连，s1在前，s2在后\ns1 = s2;                        //用s2的副本代替s1中原来的字符\ns1 == s2;                       //若s1与s2中字符完全一样，则返回true，否则返回false，对大小写敏感\ns1 != s2;                       //若s1与s2中字符不完全一样，则返回true，否则返回false，对大小写敏感\n<,<=,>,>=;                      //利用字符在字典中顺序进行比较，且对字符的大小写敏感\n```\n\n关于读写string对象，一般用标准库中的iostearm来读写，具体如下：\n\n```c++\nint main(void)\n{\n        string s;\n        cin >> s;\n        cout << s <<endl;\n        return 0;\n}\n```\n\n上述代码在运行时会从运行窗口读取用户输入的第一个字符串(从开始输入第一个字符到第一个空格的内容)到s中，注意string对象会忽略开头的空白(即空格符、换行符、制表符等)。\n\n和内置类型的输入输出一样，string对象的此类操作也是返回运算符左边的对象作为操作结果。因此，多个输入或输出可以连写在一起：\n\n```c++\nstring s1 , s2 , s3;\ncin >> s1 >> s2 >> s3;\ncout << s1 << s2 << s3 << endl;\n```\n\n使用getline函数可以读取一整行的字符，getline函数需要两个参数，分别为一个输入流对象和一个string对象，使用时会将输入流对象中的一整行字符读入string对象中(u不包括换行符)。\n\nstring对象的empty和size方法正如先前介绍的一般，需要注意的是size方法返回的数值的类型并不是int而是一个string::size_type类型的值，本质上来说它是一个无符号整形的值且能够放下任何string类的size返回值的变量，所以请勿直接使用它参与运算。\n\nstring对象可以直接与字面值进行相加运算。\n\n关于string对象中单个字符的处理，在cctype头文件里定义一组标准库函数处理这部分操作，如下为其中的主要函数名以及其含义：\n\n```c++\nisalnum(c);             //当c为字母或数字时为真\nisalpha(c);             //当c为字母i时为真\niscntrl(c);             //当c为控制字时为真\nisdigit(c);             //当c数字时为真\nisgraph(c);             //当c不是空格但是可打印时为真\nislower(c);             //当c是小写字母时为真\nisprint(c);             //当c是可打印字符时为真\nispunch(c);             //当c为标点符号时为真(即c是除控制字、数字、字母、可打印空白以外的字符)\nisspace(c);             //当c为空白时为真(即c是除空格、横向制表符、纵向制表符、回车、换行、进纸符以外的字符)\nisupper(c);             //当c为大写字符时为真\nisxdigit(c);            //当c为十六进制数字时为真\ntoupper(c);             //如果c是小写字符，返回对应的大写字母，否则原样返回c\ntolower(c);             //如果c是大写字符，返回对应的小写字母，否则原样返回c\n```\n\n若要处理每个字符，则可以使用基于范围的for语句，C++11标准提供了一种范围for语句可适用于此情况，其语法形式为：\n```c++\nfor ( declaration : expression )\n        statement;\n```\n\n其中expression为一个对象，用于表示一个序列。而declaration部分负责定义一个变量用于访问序列中的基础元素。每次迭代declaration部分的变量会被初始化为expression部分的下一个元素值。\n\n值得注意的是这条语句迭代时实际上是将下一个元素的值拷贝给declaration部分的变量，使用这个语句对string对象进行任何操作不会对string对象本身造成修改。\n\n如要修改string对象本身则可将declaration部分定义为一个引用，例如：\n\n```c++\nfor ( auto &c : s )\n{\n        c = toupper(c);                //每一次会将s的下一个值的引用初始化给c\n}\n```\n\n若要访问string对象的部分字符则可以使用下标访问，使用方法与数组相同，但为了防止出现不可预测的结果，使用下标访问前因先确定string对象不为空：\n\n```c++\nif ( !s.empty() \n{\n        s[0] = toupper(s[0]);\n})\n```\n","source":"_posts/C-标准库笔笔记-二.md","raw":"---\ntitle: C++标准库笔笔记_二\ndate: 2022-03-02 21:39:36\ntags:\n        - 编程相关\n        - C++\n        - C++标准库\n---\n\n<center>\n\n# C++标准库笔记(二)\n\n</center>\n\n## 标准库类型string\n\n标准库类型string表示可变长的字符序列，使用string类型必须首先包含string头文件。作为标准库的一部分，string定义在命名空间std中，接下来的所有示例都默认包含以下代码：\n\n```c++\n#include <string>\nusing std::string;\n```\n\n## 关于如何定义和初始化string对象\n\n定义的方式与其他变量的定义没有不同，初始化则有许多方式，如下：\n\n```c++\nstring s1;              //默认初始化，s1是一个空串\nstring s2(s1);          //s2是s1的副本\nstring s3 = s1;         //等价于s3(s1)，s3是s1的副本\nstring s4(\"value\");     //s4是字面值\"value\"的副本，除了字面值最后的那个空字符外\nstring s5 = \"value\";    //等价于s5(\"value\"),s5是字面值\"value\"的副本\nstring s6(n,\"c\");       //把s4初始化为由连续n个字符c组成的串\n```\n\n尽管如此，在c++11后，建议使用统一的方式进行变量的初始化，即在变量名后的大括号内写上变量的初始内容，比如：\n\n```c++\nstring s1{\"value\"};     //s1是字面值\"value\"的副本，除了字面值最后的那个空字符外\nstring s2{s1};          //s2是s1的副本\n```\n\n## string对象上的操作\n\n如下所示为基本的string对象操作：\n\n```c++\nos << s;                        //将s写入到输出流os中\nis >> s;                        //将输入流is中的数据写入到s中，到第一个空格为止\ngetline( is , s );              //将is中读取整行数据写入s中，包括空格\ns.empty();                      //判断对象s是否e为空，为空则返回true,不为空则返回false\ns.size();                       //返回s中字符的个数\ns[n];                           //返回s中第n个字符的引用，n从0开始记起\ns1 + s2;                        //将s1与s2首尾相连，s1在前，s2在后\ns1 = s2;                        //用s2的副本代替s1中原来的字符\ns1 == s2;                       //若s1与s2中字符完全一样，则返回true，否则返回false，对大小写敏感\ns1 != s2;                       //若s1与s2中字符不完全一样，则返回true，否则返回false，对大小写敏感\n<,<=,>,>=;                      //利用字符在字典中顺序进行比较，且对字符的大小写敏感\n```\n\n关于读写string对象，一般用标准库中的iostearm来读写，具体如下：\n\n```c++\nint main(void)\n{\n        string s;\n        cin >> s;\n        cout << s <<endl;\n        return 0;\n}\n```\n\n上述代码在运行时会从运行窗口读取用户输入的第一个字符串(从开始输入第一个字符到第一个空格的内容)到s中，注意string对象会忽略开头的空白(即空格符、换行符、制表符等)。\n\n和内置类型的输入输出一样，string对象的此类操作也是返回运算符左边的对象作为操作结果。因此，多个输入或输出可以连写在一起：\n\n```c++\nstring s1 , s2 , s3;\ncin >> s1 >> s2 >> s3;\ncout << s1 << s2 << s3 << endl;\n```\n\n使用getline函数可以读取一整行的字符，getline函数需要两个参数，分别为一个输入流对象和一个string对象，使用时会将输入流对象中的一整行字符读入string对象中(u不包括换行符)。\n\nstring对象的empty和size方法正如先前介绍的一般，需要注意的是size方法返回的数值的类型并不是int而是一个string::size_type类型的值，本质上来说它是一个无符号整形的值且能够放下任何string类的size返回值的变量，所以请勿直接使用它参与运算。\n\nstring对象可以直接与字面值进行相加运算。\n\n关于string对象中单个字符的处理，在cctype头文件里定义一组标准库函数处理这部分操作，如下为其中的主要函数名以及其含义：\n\n```c++\nisalnum(c);             //当c为字母或数字时为真\nisalpha(c);             //当c为字母i时为真\niscntrl(c);             //当c为控制字时为真\nisdigit(c);             //当c数字时为真\nisgraph(c);             //当c不是空格但是可打印时为真\nislower(c);             //当c是小写字母时为真\nisprint(c);             //当c是可打印字符时为真\nispunch(c);             //当c为标点符号时为真(即c是除控制字、数字、字母、可打印空白以外的字符)\nisspace(c);             //当c为空白时为真(即c是除空格、横向制表符、纵向制表符、回车、换行、进纸符以外的字符)\nisupper(c);             //当c为大写字符时为真\nisxdigit(c);            //当c为十六进制数字时为真\ntoupper(c);             //如果c是小写字符，返回对应的大写字母，否则原样返回c\ntolower(c);             //如果c是大写字符，返回对应的小写字母，否则原样返回c\n```\n\n若要处理每个字符，则可以使用基于范围的for语句，C++11标准提供了一种范围for语句可适用于此情况，其语法形式为：\n```c++\nfor ( declaration : expression )\n        statement;\n```\n\n其中expression为一个对象，用于表示一个序列。而declaration部分负责定义一个变量用于访问序列中的基础元素。每次迭代declaration部分的变量会被初始化为expression部分的下一个元素值。\n\n值得注意的是这条语句迭代时实际上是将下一个元素的值拷贝给declaration部分的变量，使用这个语句对string对象进行任何操作不会对string对象本身造成修改。\n\n如要修改string对象本身则可将declaration部分定义为一个引用，例如：\n\n```c++\nfor ( auto &c : s )\n{\n        c = toupper(c);                //每一次会将s的下一个值的引用初始化给c\n}\n```\n\n若要访问string对象的部分字符则可以使用下标访问，使用方法与数组相同，但为了防止出现不可预测的结果，使用下标访问前因先确定string对象不为空：\n\n```c++\nif ( !s.empty() \n{\n        s[0] = toupper(s[0]);\n})\n```\n","slug":"C-标准库笔笔记-二","published":1,"updated":"2022-03-02T13:49:13.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7toug0004mkv0h57tageo","content":"<center>\n\n<h1 id=\"C-标准库笔记-二\"><a href=\"#C-标准库笔记-二\" class=\"headerlink\" title=\"C++标准库笔记(二)\"></a>C++标准库笔记(二)</h1></center>\n\n<h2 id=\"标准库类型string\"><a href=\"#标准库类型string\" class=\"headerlink\" title=\"标准库类型string\"></a>标准库类型string</h2><p>标准库类型string表示可变长的字符序列，使用string类型必须首先包含string头文件。作为标准库的一部分，string定义在命名空间std中，接下来的所有示例都默认包含以下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::string;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于如何定义和初始化string对象\"><a href=\"#关于如何定义和初始化string对象\" class=\"headerlink\" title=\"关于如何定义和初始化string对象\"></a>关于如何定义和初始化string对象</h2><p>定义的方式与其他变量的定义没有不同，初始化则有许多方式，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1;              <span class=\"comment\">//默认初始化，s1是一个空串</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s2</span><span class=\"params\">(s1)</span></span>;          <span class=\"comment\">//s2是s1的副本</span></span><br><span class=\"line\">string s3 = s1;         <span class=\"comment\">//等价于s3(s1)，s3是s1的副本</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s4</span><span class=\"params\">(<span class=\"string\">&quot;value&quot;</span>)</span></span>;     <span class=\"comment\">//s4是字面值&quot;value&quot;的副本，除了字面值最后的那个空字符外</span></span><br><span class=\"line\">string s5 = <span class=\"string\">&quot;value&quot;</span>;    <span class=\"comment\">//等价于s5(&quot;value&quot;),s5是字面值&quot;value&quot;的副本</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s6</span><span class=\"params\">(n,<span class=\"string\">&quot;c&quot;</span>)</span></span>;       <span class=\"comment\">//把s4初始化为由连续n个字符c组成的串</span></span><br></pre></td></tr></table></figure>\n\n<p>尽管如此，在c++11后，建议使用统一的方式进行变量的初始化，即在变量名后的大括号内写上变量的初始内容，比如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1&#123;<span class=\"string\">&quot;value&quot;</span>&#125;;     <span class=\"comment\">//s1是字面值&quot;value&quot;的副本，除了字面值最后的那个空字符外</span></span><br><span class=\"line\">string s2&#123;s1&#125;;          <span class=\"comment\">//s2是s1的副本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"string对象上的操作\"><a href=\"#string对象上的操作\" class=\"headerlink\" title=\"string对象上的操作\"></a>string对象上的操作</h2><p>如下所示为基本的string对象操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os &lt;&lt; s;                        <span class=\"comment\">//将s写入到输出流os中</span></span><br><span class=\"line\">is &gt;&gt; s;                        <span class=\"comment\">//将输入流is中的数据写入到s中，到第一个空格为止</span></span><br><span class=\"line\"><span class=\"built_in\">getline</span>( is , s );              <span class=\"comment\">//将is中读取整行数据写入s中，包括空格</span></span><br><span class=\"line\">s.<span class=\"built_in\">empty</span>();                      <span class=\"comment\">//判断对象s是否e为空，为空则返回true,不为空则返回false</span></span><br><span class=\"line\">s.<span class=\"built_in\">size</span>();                       <span class=\"comment\">//返回s中字符的个数</span></span><br><span class=\"line\">s[n];                           <span class=\"comment\">//返回s中第n个字符的引用，n从0开始记起</span></span><br><span class=\"line\">s1 + s2;                        <span class=\"comment\">//将s1与s2首尾相连，s1在前，s2在后</span></span><br><span class=\"line\">s1 = s2;                        <span class=\"comment\">//用s2的副本代替s1中原来的字符</span></span><br><span class=\"line\">s1 == s2;                       <span class=\"comment\">//若s1与s2中字符完全一样，则返回true，否则返回false，对大小写敏感</span></span><br><span class=\"line\">s1 != s2;                       <span class=\"comment\">//若s1与s2中字符不完全一样，则返回true，否则返回false，对大小写敏感</span></span><br><span class=\"line\">&lt;,&lt;=,&gt;,&gt;=;                      <span class=\"comment\">//利用字符在字典中顺序进行比较，且对字符的大小写敏感</span></span><br></pre></td></tr></table></figure>\n\n<p>关于读写string对象，一般用标准库中的iostearm来读写，具体如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        cout &lt;&lt; s &lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码在运行时会从运行窗口读取用户输入的第一个字符串(从开始输入第一个字符到第一个空格的内容)到s中，注意string对象会忽略开头的空白(即空格符、换行符、制表符等)。</p>\n<p>和内置类型的输入输出一样，string对象的此类操作也是返回运算符左边的对象作为操作结果。因此，多个输入或输出可以连写在一起：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 , s2 , s3;</span><br><span class=\"line\">cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;</span><br><span class=\"line\">cout &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; s3 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>使用getline函数可以读取一整行的字符，getline函数需要两个参数，分别为一个输入流对象和一个string对象，使用时会将输入流对象中的一整行字符读入string对象中(u不包括换行符)。</p>\n<p>string对象的empty和size方法正如先前介绍的一般，需要注意的是size方法返回的数值的类型并不是int而是一个string::size_type类型的值，本质上来说它是一个无符号整形的值且能够放下任何string类的size返回值的变量，所以请勿直接使用它参与运算。</p>\n<p>string对象可以直接与字面值进行相加运算。</p>\n<p>关于string对象中单个字符的处理，在cctype头文件里定义一组标准库函数处理这部分操作，如下为其中的主要函数名以及其含义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isalnum</span>(c);             <span class=\"comment\">//当c为字母或数字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isalpha</span>(c);             <span class=\"comment\">//当c为字母i时为真</span></span><br><span class=\"line\"><span class=\"built_in\">iscntrl</span>(c);             <span class=\"comment\">//当c为控制字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isdigit</span>(c);             <span class=\"comment\">//当c数字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isgraph</span>(c);             <span class=\"comment\">//当c不是空格但是可打印时为真</span></span><br><span class=\"line\"><span class=\"built_in\">islower</span>(c);             <span class=\"comment\">//当c是小写字母时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isprint</span>(c);             <span class=\"comment\">//当c是可打印字符时为真</span></span><br><span class=\"line\"><span class=\"built_in\">ispunch</span>(c);             <span class=\"comment\">//当c为标点符号时为真(即c是除控制字、数字、字母、可打印空白以外的字符)</span></span><br><span class=\"line\"><span class=\"built_in\">isspace</span>(c);             <span class=\"comment\">//当c为空白时为真(即c是除空格、横向制表符、纵向制表符、回车、换行、进纸符以外的字符)</span></span><br><span class=\"line\"><span class=\"built_in\">isupper</span>(c);             <span class=\"comment\">//当c为大写字符时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isxdigit</span>(c);            <span class=\"comment\">//当c为十六进制数字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">toupper</span>(c);             <span class=\"comment\">//如果c是小写字符，返回对应的大写字母，否则原样返回c</span></span><br><span class=\"line\"><span class=\"built_in\">tolower</span>(c);             <span class=\"comment\">//如果c是大写字符，返回对应的小写字母，否则原样返回c</span></span><br></pre></td></tr></table></figure>\n\n<p>若要处理每个字符，则可以使用基于范围的for语句，C++11标准提供了一种范围for语句可适用于此情况，其语法形式为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( declaration : expression )</span><br><span class=\"line\">        statement;</span><br></pre></td></tr></table></figure>\n\n<p>其中expression为一个对象，用于表示一个序列。而declaration部分负责定义一个变量用于访问序列中的基础元素。每次迭代declaration部分的变量会被初始化为expression部分的下一个元素值。</p>\n<p>值得注意的是这条语句迭代时实际上是将下一个元素的值拷贝给declaration部分的变量，使用这个语句对string对象进行任何操作不会对string对象本身造成修改。</p>\n<p>如要修改string对象本身则可将declaration部分定义为一个引用，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> &amp;c : s )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        c = <span class=\"built_in\">toupper</span>(c);                <span class=\"comment\">//每一次会将s的下一个值的引用初始化给c</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若要访问string对象的部分字符则可以使用下标访问，使用方法与数组相同，但为了防止出现不可预测的结果，使用下标访问前因先确定string对象不为空：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !s.<span class=\"built_in\">empty</span>() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        s[<span class=\"number\">0</span>] = <span class=\"built_in\">toupper</span>(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"C-标准库笔记-二\"><a href=\"#C-标准库笔记-二\" class=\"headerlink\" title=\"C++标准库笔记(二)\"></a>C++标准库笔记(二)</h1></center>\n\n<h2 id=\"标准库类型string\"><a href=\"#标准库类型string\" class=\"headerlink\" title=\"标准库类型string\"></a>标准库类型string</h2><p>标准库类型string表示可变长的字符序列，使用string类型必须首先包含string头文件。作为标准库的一部分，string定义在命名空间std中，接下来的所有示例都默认包含以下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::string;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于如何定义和初始化string对象\"><a href=\"#关于如何定义和初始化string对象\" class=\"headerlink\" title=\"关于如何定义和初始化string对象\"></a>关于如何定义和初始化string对象</h2><p>定义的方式与其他变量的定义没有不同，初始化则有许多方式，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1;              <span class=\"comment\">//默认初始化，s1是一个空串</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s2</span><span class=\"params\">(s1)</span></span>;          <span class=\"comment\">//s2是s1的副本</span></span><br><span class=\"line\">string s3 = s1;         <span class=\"comment\">//等价于s3(s1)，s3是s1的副本</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s4</span><span class=\"params\">(<span class=\"string\">&quot;value&quot;</span>)</span></span>;     <span class=\"comment\">//s4是字面值&quot;value&quot;的副本，除了字面值最后的那个空字符外</span></span><br><span class=\"line\">string s5 = <span class=\"string\">&quot;value&quot;</span>;    <span class=\"comment\">//等价于s5(&quot;value&quot;),s5是字面值&quot;value&quot;的副本</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">s6</span><span class=\"params\">(n,<span class=\"string\">&quot;c&quot;</span>)</span></span>;       <span class=\"comment\">//把s4初始化为由连续n个字符c组成的串</span></span><br></pre></td></tr></table></figure>\n\n<p>尽管如此，在c++11后，建议使用统一的方式进行变量的初始化，即在变量名后的大括号内写上变量的初始内容，比如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1&#123;<span class=\"string\">&quot;value&quot;</span>&#125;;     <span class=\"comment\">//s1是字面值&quot;value&quot;的副本，除了字面值最后的那个空字符外</span></span><br><span class=\"line\">string s2&#123;s1&#125;;          <span class=\"comment\">//s2是s1的副本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"string对象上的操作\"><a href=\"#string对象上的操作\" class=\"headerlink\" title=\"string对象上的操作\"></a>string对象上的操作</h2><p>如下所示为基本的string对象操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os &lt;&lt; s;                        <span class=\"comment\">//将s写入到输出流os中</span></span><br><span class=\"line\">is &gt;&gt; s;                        <span class=\"comment\">//将输入流is中的数据写入到s中，到第一个空格为止</span></span><br><span class=\"line\"><span class=\"built_in\">getline</span>( is , s );              <span class=\"comment\">//将is中读取整行数据写入s中，包括空格</span></span><br><span class=\"line\">s.<span class=\"built_in\">empty</span>();                      <span class=\"comment\">//判断对象s是否e为空，为空则返回true,不为空则返回false</span></span><br><span class=\"line\">s.<span class=\"built_in\">size</span>();                       <span class=\"comment\">//返回s中字符的个数</span></span><br><span class=\"line\">s[n];                           <span class=\"comment\">//返回s中第n个字符的引用，n从0开始记起</span></span><br><span class=\"line\">s1 + s2;                        <span class=\"comment\">//将s1与s2首尾相连，s1在前，s2在后</span></span><br><span class=\"line\">s1 = s2;                        <span class=\"comment\">//用s2的副本代替s1中原来的字符</span></span><br><span class=\"line\">s1 == s2;                       <span class=\"comment\">//若s1与s2中字符完全一样，则返回true，否则返回false，对大小写敏感</span></span><br><span class=\"line\">s1 != s2;                       <span class=\"comment\">//若s1与s2中字符不完全一样，则返回true，否则返回false，对大小写敏感</span></span><br><span class=\"line\">&lt;,&lt;=,&gt;,&gt;=;                      <span class=\"comment\">//利用字符在字典中顺序进行比较，且对字符的大小写敏感</span></span><br></pre></td></tr></table></figure>\n\n<p>关于读写string对象，一般用标准库中的iostearm来读写，具体如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        cout &lt;&lt; s &lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码在运行时会从运行窗口读取用户输入的第一个字符串(从开始输入第一个字符到第一个空格的内容)到s中，注意string对象会忽略开头的空白(即空格符、换行符、制表符等)。</p>\n<p>和内置类型的输入输出一样，string对象的此类操作也是返回运算符左边的对象作为操作结果。因此，多个输入或输出可以连写在一起：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s1 , s2 , s3;</span><br><span class=\"line\">cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;</span><br><span class=\"line\">cout &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; s3 &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p>使用getline函数可以读取一整行的字符，getline函数需要两个参数，分别为一个输入流对象和一个string对象，使用时会将输入流对象中的一整行字符读入string对象中(u不包括换行符)。</p>\n<p>string对象的empty和size方法正如先前介绍的一般，需要注意的是size方法返回的数值的类型并不是int而是一个string::size_type类型的值，本质上来说它是一个无符号整形的值且能够放下任何string类的size返回值的变量，所以请勿直接使用它参与运算。</p>\n<p>string对象可以直接与字面值进行相加运算。</p>\n<p>关于string对象中单个字符的处理，在cctype头文件里定义一组标准库函数处理这部分操作，如下为其中的主要函数名以及其含义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isalnum</span>(c);             <span class=\"comment\">//当c为字母或数字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isalpha</span>(c);             <span class=\"comment\">//当c为字母i时为真</span></span><br><span class=\"line\"><span class=\"built_in\">iscntrl</span>(c);             <span class=\"comment\">//当c为控制字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isdigit</span>(c);             <span class=\"comment\">//当c数字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isgraph</span>(c);             <span class=\"comment\">//当c不是空格但是可打印时为真</span></span><br><span class=\"line\"><span class=\"built_in\">islower</span>(c);             <span class=\"comment\">//当c是小写字母时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isprint</span>(c);             <span class=\"comment\">//当c是可打印字符时为真</span></span><br><span class=\"line\"><span class=\"built_in\">ispunch</span>(c);             <span class=\"comment\">//当c为标点符号时为真(即c是除控制字、数字、字母、可打印空白以外的字符)</span></span><br><span class=\"line\"><span class=\"built_in\">isspace</span>(c);             <span class=\"comment\">//当c为空白时为真(即c是除空格、横向制表符、纵向制表符、回车、换行、进纸符以外的字符)</span></span><br><span class=\"line\"><span class=\"built_in\">isupper</span>(c);             <span class=\"comment\">//当c为大写字符时为真</span></span><br><span class=\"line\"><span class=\"built_in\">isxdigit</span>(c);            <span class=\"comment\">//当c为十六进制数字时为真</span></span><br><span class=\"line\"><span class=\"built_in\">toupper</span>(c);             <span class=\"comment\">//如果c是小写字符，返回对应的大写字母，否则原样返回c</span></span><br><span class=\"line\"><span class=\"built_in\">tolower</span>(c);             <span class=\"comment\">//如果c是大写字符，返回对应的小写字母，否则原样返回c</span></span><br></pre></td></tr></table></figure>\n\n<p>若要处理每个字符，则可以使用基于范围的for语句，C++11标准提供了一种范围for语句可适用于此情况，其语法形式为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( declaration : expression )</span><br><span class=\"line\">        statement;</span><br></pre></td></tr></table></figure>\n\n<p>其中expression为一个对象，用于表示一个序列。而declaration部分负责定义一个变量用于访问序列中的基础元素。每次迭代declaration部分的变量会被初始化为expression部分的下一个元素值。</p>\n<p>值得注意的是这条语句迭代时实际上是将下一个元素的值拷贝给declaration部分的变量，使用这个语句对string对象进行任何操作不会对string对象本身造成修改。</p>\n<p>如要修改string对象本身则可将declaration部分定义为一个引用，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> &amp;c : s )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        c = <span class=\"built_in\">toupper</span>(c);                <span class=\"comment\">//每一次会将s的下一个值的引用初始化给c</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若要访问string对象的部分字符则可以使用下标访问，使用方法与数组相同，但为了防止出现不可预测的结果，使用下标访问前因先确定string对象不为空：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !s.<span class=\"built_in\">empty</span>() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        s[<span class=\"number\">0</span>] = <span class=\"built_in\">toupper</span>(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"我想","date":"2022-03-02T13:29:56.000Z","_content":"<center>\n\n# 我想\n\n### ~致蛋蛋    \n\n*我想去没有梦想的远方*  \n*我想看没有起点的方向*  \n*我想找个吉普去流浪*  \n*或者坐在墙头看着太阳妄想*  \n*我想迷失在黄昏的道路旁*  \n*我想沉睡在生锈的垃圾箱*  \n*我想走在废弃的轨道上*  \n*看青草生长*  \n*花儿开放*  \n*我想寻一束沉默的麦田*  \n*我想捉一片残酷的蝴蝶*  \n*我想摘一株花海*  \n*白色的紫罗兰*  \n*虚幻又向往*  \n*我想拥抱来自北方的风*  \n*我想拦住整片天空*  \n*我想称颂*  \n*无能者无畏的诉求*  \n*我想流放这时光*  \n*我想认真的推搡*  \n*我想像傻瓜一样歌唱*  \n*没人应和却响亮*  \n*我想要一个许诺的资格*  \n*我想不曾喜欢过*  \n*那片天空*  \n*好像装着星星月亮的锅*  \n\n> 人总是向往自己没有的东西  \n> 比如孤独和绝望\n\n</center>","source":"_posts/我想.md","raw":"---\ntitle: 我想\ndate: 2022-03-02 21:29:56\ntags: \n    - 致蛋蛋\n    - 一首小诗\n---\n<center>\n\n# 我想\n\n### ~致蛋蛋    \n\n*我想去没有梦想的远方*  \n*我想看没有起点的方向*  \n*我想找个吉普去流浪*  \n*或者坐在墙头看着太阳妄想*  \n*我想迷失在黄昏的道路旁*  \n*我想沉睡在生锈的垃圾箱*  \n*我想走在废弃的轨道上*  \n*看青草生长*  \n*花儿开放*  \n*我想寻一束沉默的麦田*  \n*我想捉一片残酷的蝴蝶*  \n*我想摘一株花海*  \n*白色的紫罗兰*  \n*虚幻又向往*  \n*我想拥抱来自北方的风*  \n*我想拦住整片天空*  \n*我想称颂*  \n*无能者无畏的诉求*  \n*我想流放这时光*  \n*我想认真的推搡*  \n*我想像傻瓜一样歌唱*  \n*没人应和却响亮*  \n*我想要一个许诺的资格*  \n*我想不曾喜欢过*  \n*那片天空*  \n*好像装着星星月亮的锅*  \n\n> 人总是向往自己没有的东西  \n> 比如孤独和绝望\n\n</center>","slug":"我想","published":1,"updated":"2022-03-02T13:46:32.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7toug0005mkv0hntp18ef","content":"<center>\n\n<h1 id=\"我想\"><a href=\"#我想\" class=\"headerlink\" title=\"我想\"></a>我想</h1><h3 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"~致蛋蛋\"></a>~致蛋蛋</h3><p><em>我想去没有梦想的远方</em><br><em>我想看没有起点的方向</em><br><em>我想找个吉普去流浪</em><br><em>或者坐在墙头看着太阳妄想</em><br><em>我想迷失在黄昏的道路旁</em><br><em>我想沉睡在生锈的垃圾箱</em><br><em>我想走在废弃的轨道上</em><br><em>看青草生长</em><br><em>花儿开放</em><br><em>我想寻一束沉默的麦田</em><br><em>我想捉一片残酷的蝴蝶</em><br><em>我想摘一株花海</em><br><em>白色的紫罗兰</em><br><em>虚幻又向往</em><br><em>我想拥抱来自北方的风</em><br><em>我想拦住整片天空</em><br><em>我想称颂</em><br><em>无能者无畏的诉求</em><br><em>我想流放这时光</em><br><em>我想认真的推搡</em><br><em>我想像傻瓜一样歌唱</em><br><em>没人应和却响亮</em><br><em>我想要一个许诺的资格</em><br><em>我想不曾喜欢过</em><br><em>那片天空</em><br><em>好像装着星星月亮的锅</em>  </p>\n<blockquote>\n<p>人总是向往自己没有的东西<br>比如孤独和绝望</p>\n</blockquote>\n</center>","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"我想\"><a href=\"#我想\" class=\"headerlink\" title=\"我想\"></a>我想</h1><h3 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"~致蛋蛋\"></a>~致蛋蛋</h3><p><em>我想去没有梦想的远方</em><br><em>我想看没有起点的方向</em><br><em>我想找个吉普去流浪</em><br><em>或者坐在墙头看着太阳妄想</em><br><em>我想迷失在黄昏的道路旁</em><br><em>我想沉睡在生锈的垃圾箱</em><br><em>我想走在废弃的轨道上</em><br><em>看青草生长</em><br><em>花儿开放</em><br><em>我想寻一束沉默的麦田</em><br><em>我想捉一片残酷的蝴蝶</em><br><em>我想摘一株花海</em><br><em>白色的紫罗兰</em><br><em>虚幻又向往</em><br><em>我想拥抱来自北方的风</em><br><em>我想拦住整片天空</em><br><em>我想称颂</em><br><em>无能者无畏的诉求</em><br><em>我想流放这时光</em><br><em>我想认真的推搡</em><br><em>我想像傻瓜一样歌唱</em><br><em>没人应和却响亮</em><br><em>我想要一个许诺的资格</em><br><em>我想不曾喜欢过</em><br><em>那片天空</em><br><em>好像装着星星月亮的锅</em>  </p>\n<blockquote>\n<p>人总是向往自己没有的东西<br>比如孤独和绝望</p>\n</blockquote>\n</center>"},{"title":"砂糖与香辛料","date":"2022-03-02T13:26:56.000Z","_content":"<center>\n\n# 砂糖与香辛料\n\n## 致蛋蛋\n\n\n\n*我不曾目睹童话的朴素*\n*也不曾听闻寓言的模糊*  \n*我走过许多的路*  \n*我向往没有读过的每一页诗书*  \n\n*听说砂糖与香辛料相熟*  \n*听说美好从不稀疏*  \n*听说阳光喜欢雨露*  \n*有个女孩儿*    *她从不服输*  \n\n*晨光下道路显得畅通无阻*  \n*雨露里郁金香也觉得舒服*  \n*轻风吹拂*  \n*就是无家可归也不会陷入迷途*  \n*好像远方有指路的蜘蛛*  \n\n*风也会迷路*  \n*小草也会稀疏*  \n*蒲公英最后总是扎根于泥土*  \n*白色的雏菊也会开在十字的路*  \n\n*有一天紫色的薰衣草会铺满房屋*  \n*有一天车矢菊会开在向阳的铁路*  \n*有一天黄色的郁金香会想念青棠*  \n*有一天有个人  他骑着找食的猪*\n\n> 女孩子是由砂糖和香辛料  \n> 以及某种美好的东西组成的\n\n</center>","source":"_posts/砂糖与香辛料.md","raw":"---\ntitle: 砂糖与香辛料\ndate: 2022-03-02 21:26:56\ntags: \n    - 致蛋蛋\n    - 一首小诗\n---\n<center>\n\n# 砂糖与香辛料\n\n## 致蛋蛋\n\n\n\n*我不曾目睹童话的朴素*\n*也不曾听闻寓言的模糊*  \n*我走过许多的路*  \n*我向往没有读过的每一页诗书*  \n\n*听说砂糖与香辛料相熟*  \n*听说美好从不稀疏*  \n*听说阳光喜欢雨露*  \n*有个女孩儿*    *她从不服输*  \n\n*晨光下道路显得畅通无阻*  \n*雨露里郁金香也觉得舒服*  \n*轻风吹拂*  \n*就是无家可归也不会陷入迷途*  \n*好像远方有指路的蜘蛛*  \n\n*风也会迷路*  \n*小草也会稀疏*  \n*蒲公英最后总是扎根于泥土*  \n*白色的雏菊也会开在十字的路*  \n\n*有一天紫色的薰衣草会铺满房屋*  \n*有一天车矢菊会开在向阳的铁路*  \n*有一天黄色的郁金香会想念青棠*  \n*有一天有个人  他骑着找食的猪*\n\n> 女孩子是由砂糖和香辛料  \n> 以及某种美好的东西组成的\n\n</center>","slug":"砂糖与香辛料","published":1,"updated":"2022-03-02T13:45:56.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7toui0007mkv04sat3jwc","content":"<center>\n\n<h1 id=\"砂糖与香辛料\"><a href=\"#砂糖与香辛料\" class=\"headerlink\" title=\"砂糖与香辛料\"></a>砂糖与香辛料</h1><h2 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"致蛋蛋\"></a>致蛋蛋</h2><p><em>我不曾目睹童话的朴素</em><br><em>也不曾听闻寓言的模糊</em><br><em>我走过许多的路</em><br><em>我向往没有读过的每一页诗书</em>  </p>\n<p><em>听说砂糖与香辛料相熟</em><br><em>听说美好从不稀疏</em><br><em>听说阳光喜欢雨露</em><br><em>有个女孩儿</em>    <em>她从不服输</em>  </p>\n<p><em>晨光下道路显得畅通无阻</em><br><em>雨露里郁金香也觉得舒服</em><br><em>轻风吹拂</em><br><em>就是无家可归也不会陷入迷途</em><br><em>好像远方有指路的蜘蛛</em>  </p>\n<p><em>风也会迷路</em><br><em>小草也会稀疏</em><br><em>蒲公英最后总是扎根于泥土</em><br><em>白色的雏菊也会开在十字的路</em>  </p>\n<p><em>有一天紫色的薰衣草会铺满房屋</em><br><em>有一天车矢菊会开在向阳的铁路</em><br><em>有一天黄色的郁金香会想念青棠</em><br><em>有一天有个人  他骑着找食的猪</em></p>\n<blockquote>\n<p>女孩子是由砂糖和香辛料<br>以及某种美好的东西组成的</p>\n</blockquote>\n</center>","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"砂糖与香辛料\"><a href=\"#砂糖与香辛料\" class=\"headerlink\" title=\"砂糖与香辛料\"></a>砂糖与香辛料</h1><h2 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"致蛋蛋\"></a>致蛋蛋</h2><p><em>我不曾目睹童话的朴素</em><br><em>也不曾听闻寓言的模糊</em><br><em>我走过许多的路</em><br><em>我向往没有读过的每一页诗书</em>  </p>\n<p><em>听说砂糖与香辛料相熟</em><br><em>听说美好从不稀疏</em><br><em>听说阳光喜欢雨露</em><br><em>有个女孩儿</em>    <em>她从不服输</em>  </p>\n<p><em>晨光下道路显得畅通无阻</em><br><em>雨露里郁金香也觉得舒服</em><br><em>轻风吹拂</em><br><em>就是无家可归也不会陷入迷途</em><br><em>好像远方有指路的蜘蛛</em>  </p>\n<p><em>风也会迷路</em><br><em>小草也会稀疏</em><br><em>蒲公英最后总是扎根于泥土</em><br><em>白色的雏菊也会开在十字的路</em>  </p>\n<p><em>有一天紫色的薰衣草会铺满房屋</em><br><em>有一天车矢菊会开在向阳的铁路</em><br><em>有一天黄色的郁金香会想念青棠</em><br><em>有一天有个人  他骑着找食的猪</em></p>\n<blockquote>\n<p>女孩子是由砂糖和香辛料<br>以及某种美好的东西组成的</p>\n</blockquote>\n</center>"},{"title":"无题","date":"2022-03-02T13:31:49.000Z","_content":"<center>\n\n# 无题\n\n## 致蛋蛋\n\n*风吹过树梢拍在脸上*  \n*用手触摸阳光*  \n*云雀在眼前飞过*  \n*带出遍野的海棠*  \n*一个姑娘     要去远方*  \n*找一片紫色薰衣草的香*  \n*一个男孩     蹲在近旁*  \n*看一棵白色矢车菊开放*  \n*有人在歌唱      唱不朽时光*  \n*有人在称颂      颂青春很长*  \n*流水啊，你不要匆忙*  \n*这里不需要方向*  \n*大山啊，你不要紧张*  \n*那不是我想去的远方*  \n*在这个雨后的夏日里*  \n*野草肆意生长*  \n*带着琐碎的狂妄*  \n*野花随意开放*  \n*带着优雅的嚣张*  \n*我笑前路坎坷*  \n*我笑你不减锋芒*  \n*我笑这世界没有中央*  \n*我笑着     我走着*  \n*欣赏不褪色的希望*\n\n> 我只记得写在一个有梦的夏天  \n> 那天我穿着拖鞋  \n\n</center>","source":"_posts/无题.md","raw":"---\ntitle: 无题\ndate: 2022-03-02 21:31:49\ntags: \n    - 致蛋蛋\n    - 一首小诗\n---\n<center>\n\n# 无题\n\n## 致蛋蛋\n\n*风吹过树梢拍在脸上*  \n*用手触摸阳光*  \n*云雀在眼前飞过*  \n*带出遍野的海棠*  \n*一个姑娘     要去远方*  \n*找一片紫色薰衣草的香*  \n*一个男孩     蹲在近旁*  \n*看一棵白色矢车菊开放*  \n*有人在歌唱      唱不朽时光*  \n*有人在称颂      颂青春很长*  \n*流水啊，你不要匆忙*  \n*这里不需要方向*  \n*大山啊，你不要紧张*  \n*那不是我想去的远方*  \n*在这个雨后的夏日里*  \n*野草肆意生长*  \n*带着琐碎的狂妄*  \n*野花随意开放*  \n*带着优雅的嚣张*  \n*我笑前路坎坷*  \n*我笑你不减锋芒*  \n*我笑这世界没有中央*  \n*我笑着     我走着*  \n*欣赏不褪色的希望*\n\n> 我只记得写在一个有梦的夏天  \n> 那天我穿着拖鞋  \n\n</center>","slug":"无题","published":1,"updated":"2022-03-02T13:46:47.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0a7touj0008mkv090yze6mm","content":"<center>\n\n<h1 id=\"无题\"><a href=\"#无题\" class=\"headerlink\" title=\"无题\"></a>无题</h1><h2 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"致蛋蛋\"></a>致蛋蛋</h2><p><em>风吹过树梢拍在脸上</em><br><em>用手触摸阳光</em><br><em>云雀在眼前飞过</em><br><em>带出遍野的海棠</em><br><em>一个姑娘     要去远方</em><br><em>找一片紫色薰衣草的香</em><br><em>一个男孩     蹲在近旁</em><br><em>看一棵白色矢车菊开放</em><br><em>有人在歌唱      唱不朽时光</em><br><em>有人在称颂      颂青春很长</em><br><em>流水啊，你不要匆忙</em><br><em>这里不需要方向</em><br><em>大山啊，你不要紧张</em><br><em>那不是我想去的远方</em><br><em>在这个雨后的夏日里</em><br><em>野草肆意生长</em><br><em>带着琐碎的狂妄</em><br><em>野花随意开放</em><br><em>带着优雅的嚣张</em><br><em>我笑前路坎坷</em><br><em>我笑你不减锋芒</em><br><em>我笑这世界没有中央</em><br><em>我笑着     我走着</em><br><em>欣赏不褪色的希望</em></p>\n<blockquote>\n<p>我只记得写在一个有梦的夏天<br>那天我穿着拖鞋  </p>\n</blockquote>\n</center>","site":{"data":{}},"excerpt":"","more":"<center>\n\n<h1 id=\"无题\"><a href=\"#无题\" class=\"headerlink\" title=\"无题\"></a>无题</h1><h2 id=\"致蛋蛋\"><a href=\"#致蛋蛋\" class=\"headerlink\" title=\"致蛋蛋\"></a>致蛋蛋</h2><p><em>风吹过树梢拍在脸上</em><br><em>用手触摸阳光</em><br><em>云雀在眼前飞过</em><br><em>带出遍野的海棠</em><br><em>一个姑娘     要去远方</em><br><em>找一片紫色薰衣草的香</em><br><em>一个男孩     蹲在近旁</em><br><em>看一棵白色矢车菊开放</em><br><em>有人在歌唱      唱不朽时光</em><br><em>有人在称颂      颂青春很长</em><br><em>流水啊，你不要匆忙</em><br><em>这里不需要方向</em><br><em>大山啊，你不要紧张</em><br><em>那不是我想去的远方</em><br><em>在这个雨后的夏日里</em><br><em>野草肆意生长</em><br><em>带着琐碎的狂妄</em><br><em>野花随意开放</em><br><em>带着优雅的嚣张</em><br><em>我笑前路坎坷</em><br><em>我笑你不减锋芒</em><br><em>我笑这世界没有中央</em><br><em>我笑着     我走着</em><br><em>欣赏不褪色的希望</em></p>\n<blockquote>\n<p>我只记得写在一个有梦的夏天<br>那天我穿着拖鞋  </p>\n</blockquote>\n</center>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl0a7tou50000mkv00vun7ix3","tag_id":"cl0a7toud0002mkv0al7d137h","_id":"cl0a7toul000bmkv0ehgheqeq"},{"post_id":"cl0a7tou50000mkv00vun7ix3","tag_id":"cl0a7toui0006mkv0grxch7dc","_id":"cl0a7toul000cmkv07ouu1t7i"},{"post_id":"cl0a7tou50000mkv00vun7ix3","tag_id":"cl0a7touk0009mkv0ahd0elmf","_id":"cl0a7toum000emkv0ceyp9qcd"},{"post_id":"cl0a7toub0001mkv0182bd3fd","tag_id":"cl0a7toud0002mkv0al7d137h","_id":"cl0a7toun000hmkv09jjxaj3e"},{"post_id":"cl0a7toub0001mkv0182bd3fd","tag_id":"cl0a7toui0006mkv0grxch7dc","_id":"cl0a7toun000imkv0ghoe91y4"},{"post_id":"cl0a7toub0001mkv0182bd3fd","tag_id":"cl0a7touk0009mkv0ahd0elmf","_id":"cl0a7toun000kmkv0c98kcj96"},{"post_id":"cl0a7touf0003mkv065254m5m","tag_id":"cl0a7toum000gmkv09mmj3v7o","_id":"cl0a7toun000mmkv0edmg5dau"},{"post_id":"cl0a7touf0003mkv065254m5m","tag_id":"cl0a7toun000jmkv0ekoc246a","_id":"cl0a7touo000nmkv0d8jm1sbi"},{"post_id":"cl0a7toug0004mkv0h57tageo","tag_id":"cl0a7toud0002mkv0al7d137h","_id":"cl0a7touo000qmkv0fgb6d00v"},{"post_id":"cl0a7toug0004mkv0h57tageo","tag_id":"cl0a7toui0006mkv0grxch7dc","_id":"cl0a7touo000rmkv03nqh6pfx"},{"post_id":"cl0a7toug0004mkv0h57tageo","tag_id":"cl0a7touk0009mkv0ahd0elmf","_id":"cl0a7toup000tmkv0ezs48lm3"},{"post_id":"cl0a7toug0005mkv0hntp18ef","tag_id":"cl0a7toum000gmkv09mmj3v7o","_id":"cl0a7toup000vmkv0gdgr4d7o"},{"post_id":"cl0a7toug0005mkv0hntp18ef","tag_id":"cl0a7toun000jmkv0ekoc246a","_id":"cl0a7toup000wmkv0hyes5eg1"},{"post_id":"cl0a7toui0007mkv04sat3jwc","tag_id":"cl0a7toum000gmkv09mmj3v7o","_id":"cl0a7touq000zmkv02aklg6pn"},{"post_id":"cl0a7toui0007mkv04sat3jwc","tag_id":"cl0a7toun000jmkv0ekoc246a","_id":"cl0a7touq0010mkv0b94o7n3i"},{"post_id":"cl0a7touj0008mkv090yze6mm","tag_id":"cl0a7toum000gmkv09mmj3v7o","_id":"cl0a7touq0012mkv097laef95"},{"post_id":"cl0a7touj0008mkv090yze6mm","tag_id":"cl0a7toun000jmkv0ekoc246a","_id":"cl0a7touq0013mkv013fjc9od"}],"Tag":[{"name":"编程相关","_id":"cl0a7toud0002mkv0al7d137h"},{"name":"C++","_id":"cl0a7toui0006mkv0grxch7dc"},{"name":"C++标准库","_id":"cl0a7touk0009mkv0ahd0elmf"},{"name":"致蛋蛋","_id":"cl0a7toum000gmkv09mmj3v7o"},{"name":"一首小诗","_id":"cl0a7toun000jmkv0ekoc246a"}]}}